/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 15.06.2025 09:18:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242608;
#else
constexpr int kTensorArenaSize = 241584;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038985772989690304, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[6] = { 22621, -39993, -22348, -37820, -34526, -42375, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const TfArray<6, float> quant2_scale = { 6, { 0.00024391352781094611, 0.00017968453175853938, 0.00029366029775701463, 0.00015797815285623074, 0.00017449550796300173, 0.0001936755288625136, } };
const TfArray<6, int> quant2_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[6*1*1*32] = { 
  /* [0][0][][] */ -4,109,-36,-10,-12,20,-12,68,-43,19,-31,-44,-83,-21,54,-93,9,1,36,-21,21,44,120,21,-31,-34,-127,20,101,-37,-53,-46, 
  /* [1][0][][] */ 69,-44,-7,1,115,20,-46,51,76,8,-114,65,20,15,-47,38,3,-55,-33,-57,5,76,-1,-50,80,63,127,-6,-118,52,-43,116, 
  /* [2][0][][] */ -14,-38,45,-31,19,79,-47,32,-52,15,48,-38,52,2,28,65,20,-15,-60,-17,45,63,-127,1,-82,52,-47,-26,-6,-11,-27,-82, 
  /* [3][0][][] */ 51,-67,8,17,48,-83,-83,27,107,127,-34,-91,126,27,28,-25,108,60,62,-89,38,-100,-119,87,-58,109,-84,-6,-56,-7,90,106, 
  /* [4][0][][] */ -26,54,127,-8,-27,-75,79,-51,-39,-70,30,61,27,16,-34,-29,20,88,106,36,4,108,84,-7,65,-13,17,28,-19,-61,75,23, 
  /* [5][0][][] */ 85,94,-16,86,46,-5,-59,112,13,-119,105,-72,-11,-87,-52,-12,-28,-107,-8,116,17,43,-127,-59,114,27,1,59,25,90,-54,37, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 6,1,1,32 } };
const TfArray<6, float> quant3_scale = { 6, { 0.0045750271528959274, 0.003370299469679594, 0.0055081150494515896, 0.002963158069178462, 0.0032729702070355415, 0.003632725216448307, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -867, -1064, -239, -1196, -1730, 197, -1232, -786, -944, -1527, 67, -32, -515, -1912, -589, 120, -524, -91, -572, -1251, -300, 326, -1337, -894, 308, -442, -1397, 93, -357, -1409, -1289, -975, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.6110242439899594e-05, 5.4028630984248593e-05, 5.6365948694292456e-05, 5.1658920710906386e-05, 6.8984212703071535e-05, 6.9852751039434224e-05, 5.4344694945029914e-05, 6.2763923779129982e-05, 5.1393279136391357e-05, 5.7047698646783829e-05, 7.1474540163762867e-05, 5.226741632213816e-05, 7.3399452958256006e-05, 5.1914281357312575e-05, 7.4352574301883578e-05, 7.1803500759415329e-05, 7.6523261668626219e-05, 4.9075715651270002e-05, 4.9386810133000836e-05, 5.100538328406401e-05, 5.7690158428158611e-05, 4.5688339014304802e-05, 5.8859477576334029e-05, 6.3057123043108732e-05, 6.0353660956025124e-05, 5.4057210945757106e-05, 6.1902333982288837e-05, 5.3765881602885202e-05, 0.00012033495295327157, 5.7110115449177101e-05, 4.7922956582624465e-05, 5.757286271546036e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -54,-38,82,-11,40,-6,-96,-104,48,-122,-96,-23,12,-32,-73,83,-44,-69,-85,-51,-108,-117,36,68,-105,-46,79,9,44,-5,-61,-85,1,-76,-119,-14,-53,-76,-86,-7,22,-20,-59,96,46,-66,52,10,-30,-73,-38,114,-60,-80,-92,58,-20,26,114,-87,-25,58,-55,21,-11,11,12,47,-7,72,62,-127,75,-76,48,69,-38,20,-62,73,29,-11,25,-29,-17,-18,-67,100,-37,122,-25,-95,-33,30,-3,3, 
  /* [1][0][][] */ -46,28,-89,-36,-46,27,12,-12,61,-88,-103,60,58,-42,82,20,61,-18,-19,63,-18,-30,3,20,-2,-3,-66,66,-3,-5,61,-60,43,106,-12,5,-3,11,-50,-38,-72,-29,-56,-97,-60,11,-50,-79,-7,-73,68,6,-25,96,-98,-55,-9,78,11,62,-80,73,-76,-94,-72,35,74,48,82,-18,-21,-10,-125,35,-69,9,39,-70,-46,18,-96,39,-74,-127,-12,76,-91,-82,31,27,57,7,82,92,-7,-44, 
  /* [2][0][][] */ 58,35,-55,54,-6,-46,87,54,-127,91,-38,103,71,-4,63,-123,-36,-8,37,28,-111,0,88,11,-32,73,68,-5,-24,81,90,81,-41,6,-58,-102,-104,60,89,2,-88,-47,-102,-31,-77,33,-36,-99,112,20,53,-91,-28,97,22,36,-62,85,-43,-37,-24,51,1,78,72,43,28,62,-68,2,-46,-57,26,-105,9,23,-51,-5,-50,-71,2,-71,-24,-10,-6,-53,4,-93,69,36,-66,1,-32,-102,-33,-89, 
  /* [3][0][][] */ 35,-27,6,-45,-84,11,-120,8,11,-7,28,-22,50,54,34,-20,57,51,-71,-14,64,-98,-81,-121,-41,-120,-95,63,12,-109,46,-22,-73,-57,-40,-37,-101,-45,9,13,-48,-102,-105,-27,31,-8,-62,-95,35,-95,10,-25,54,-4,49,-109,-124,-124,-123,-81,-109,2,-58,36,21,-56,-76,-53,-54,-83,-28,58,-9,-103,20,-68,-3,65,53,-74,-101,-127,7,52,-1,8,-64,-121,-95,12,-27,-118,53,-99,-103,9, 
  /* [4][0][][] */ 5,47,-3,-15,-52,-3,-13,3,14,32,-10,34,-22,-62,-47,-18,-17,-29,-60,-17,27,-81,69,-2,-67,-31,44,-34,-76,18,-62,-48,0,42,-35,-97,-17,-50,-72,27,-61,-27,-52,-38,36,79,-3,46,-21,-49,-45,-44,-50,-1,-66,-20,-9,-65,36,11,24,-42,-61,-56,-49,24,-32,-54,-18,-52,-110,-82,-46,-37,78,12,44,-54,-6,-27,-5,-61,-127,-20,6,9,50,13,-124,-46,-3,31,-16,3,-75,-57, 
  /* [5][0][][] */ 25,-60,64,52,46,-88,27,37,27,-81,26,-32,-3,38,-18,6,3,15,-87,31,-20,-5,-30,-41,-62,-39,-39,-57,29,38,46,-76,-30,-17,-71,30,-60,-33,67,-40,-7,-6,37,24,-73,-8,-7,-31,-127,27,45,72,65,8,28,-43,126,13,-29,-24,-10,-42,0,-16,6,69,-41,8,36,-33,29,-17,-14,21,-12,-24,-24,-65,-19,25,84,15,15,112,-80,7,2,-26,85,-77,57,64,-17,13,67,-73, 
  /* [6][0][][] */ -3,0,61,33,-89,-66,-25,20,-29,-87,-27,-101,42,16,75,-127,5,-32,-23,57,-93,-111,57,16,-71,-86,-40,-65,-41,-110,11,-88,-92,-111,-68,-105,-30,7,-113,46,45,21,-5,-42,-113,56,-86,-59,-57,-19,-44,-75,24,-66,51,-48,-17,-39,-76,61,-100,-28,30,-79,-63,25,46,-67,34,-33,-116,-29,14,-77,-105,-56,-95,-103,-78,-50,1,-51,12,-44,-85,-92,-61,-108,44,51,42,-18,-27,-68,37,-45, 
  /* [7][0][][] */ 45,35,-1,-23,-24,75,-17,20,47,-22,-41,-6,7,-100,-18,90,11,-26,-27,67,-13,-21,-12,49,-41,47,24,86,-84,81,2,5,-33,-15,-5,100,-24,54,20,-46,99,-29,124,56,24,-3,37,-23,9,-66,-24,19,12,-2,20,-22,127,-77,17,-8,23,-12,18,-74,3,-46,21,-2,-113,4,2,37,36,41,60,56,-11,41,-78,79,99,-56,0,-45,52,-15,-85,77,52,24,30,59,-50,-30,-23,-53, 
  /* [8][0][][] */ -12,33,-44,-72,24,46,-74,3,7,1,42,94,-13,-75,-119,-28,-26,60,-62,18,-29,-49,76,87,-99,45,63,81,-106,0,-119,104,33,-65,-14,1,123,10,-12,62,66,82,-35,-84,17,0,-30,118,-3,-104,-44,49,-59,-69,-23,-110,53,82,-46,127,119,27,5,67,-29,-60,-41,54,-104,84,58,-30,48,103,19,3,-17,125,71,93,33,57,-106,-101,37,-1,55,-2,-5,-12,-106,87,-82,-82,-83,69, 
  /* [9][0][][] */ -26,-24,50,0,21,-80,-78,-112,54,7,-39,39,-57,-82,-117,7,12,-46,-101,-89,-33,47,-59,-99,59,-37,-25,-3,-41,-77,-102,50,7,-38,-17,-49,-98,-6,-31,-71,0,-24,9,-94,48,12,-94,57,4,-38,-64,-42,31,-77,-70,43,38,-73,25,-9,-86,56,38,-94,-93,-39,44,2,-76,80,62,-96,-21,57,-97,-113,-51,-127,-63,56,-11,-11,51,44,-44,-95,53,6,50,2,-46,62,46,-26,33,-41, 
  /* [10][0][][] */ -33,33,57,-41,7,69,77,-17,11,30,-3,-23,57,50,-25,-41,-52,44,-71,-62,-23,15,12,-40,8,37,-95,-90,-14,49,-33,-45,72,75,76,43,-28,-4,-16,5,-13,88,-127,-49,-66,-70,-15,-66,14,-12,29,16,41,54,-32,-10,-55,-24,2,-54,-23,61,81,45,84,-37,-77,-15,17,-56,-94,-36,56,-1,-77,81,-24,21,-2,-47,39,17,24,99,-99,59,70,-50,26,-53,-36,-36,-33,-29,-14,-52, 
  /* [11][0][][] */ 119,45,-10,38,87,0,34,28,70,93,-62,70,2,-40,24,-43,-64,-63,63,-1,15,87,46,-105,-62,-69,-31,68,108,19,32,-24,-80,-36,75,15,-106,22,-15,-51,-46,66,-101,-4,-69,-39,-58,-108,85,85,46,-15,-89,-27,-29,51,-97,-49,-31,-111,-88,46,90,10,23,85,-51,29,86,-8,-82,-74,35,22,-78,18,-45,-6,-33,62,-127,-52,-92,-58,53,-13,25,-18,-57,-11,-1,-119,-85,-46,-83,-100, 
  /* [12][0][][] */ 12,21,-38,-1,54,22,-11,-4,-54,48,-20,32,-34,-7,-10,-68,-45,-18,-30,-50,-36,-12,2,56,-52,-27,63,-76,58,13,-10,67,-47,-40,-40,0,16,-46,-2,39,75,34,-96,-35,-2,-73,-47,55,-13,-88,-41,75,28,15,-34,50,0,-36,49,22,35,76,3,43,67,6,-51,48,18,65,8,29,51,69,-26,-3,-22,45,-127,-75,-42,59,15,34,-27,11,42,49,-54,-93,12,32,43,-16,17,43, 
  /* [13][0][][] */ 62,-85,42,37,29,65,16,26,79,-116,-35,-51,32,30,12,-85,-114,-96,-68,-23,21,-52,51,-84,-81,-5,-26,-17,-115,-117,23,-19,-14,38,-63,-7,-104,-49,-10,13,-92,23,-80,-37,-63,-8,-15,-65,-2,53,-70,-127,-125,-21,56,-111,-72,-29,-50,-93,-66,48,-86,-33,-89,-92,-115,21,-84,-31,69,-48,-116,39,-100,-80,-106,78,32,-79,-1,-121,44,-23,-89,-122,37,71,-46,-72,-95,-4,54,-67,13,-20, 
  /* [14][0][][] */ -62,-74,37,26,36,-5,-20,-86,-6,-46,25,34,-45,-47,-81,-67,-38,-24,-13,-7,-40,-9,-18,11,-48,-58,-41,0,-86,-80,-48,5,39,-41,-50,8,43,61,12,-90,30,-66,4,32,33,-77,67,-52,72,-9,43,43,45,-30,-8,-20,18,-23,15,41,-27,-67,-11,30,-59,-27,22,-85,-72,-75,-67,35,-20,43,13,-49,11,-62,13,4,13,0,-86,-12,-86,-54,-71,43,50,-9,40,-51,35,127,-16,28, 
  /* [15][0][][] */ -37,-24,0,41,80,-80,53,-60,-30,-13,-33,17,30,-22,-109,-100,-8,-46,-102,-32,-30,-45,-1,44,40,53,-28,42,24,60,70,-92,-2,-21,-76,15,-30,65,104,-101,40,91,-48,-59,-56,-103,-57,-70,-50,-111,17,56,-27,-54,-22,-37,82,2,-16,57,-66,-41,-29,86,1,59,-74,-26,-45,-57,-25,-29,13,-65,28,-45,-43,-9,6,-15,-30,26,-55,9,-127,-60,-36,-17,84,21,-113,-15,20,56,-47,22, 
  /* [16][0][][] */ -39,-30,37,-32,18,78,-26,-2,26,35,-74,60,-10,-42,-56,-59,78,51,35,39,18,36,-26,24,-35,32,-31,7,-58,-9,21,8,-54,47,22,20,-10,31,-30,-21,12,-25,-1,34,46,36,40,-22,-26,-81,4,53,-28,67,54,27,10,51,56,-12,63,67,25,40,27,-16,-37,34,13,67,-17,-18,13,65,15,42,-11,79,-127,-34,-6,-45,19,9,-1,57,68,-15,27,-39,-44,60,25,-26,-50,22, 
  /* [17][0][][] */ 68,-84,3,70,-31,-69,-36,-105,41,-43,64,84,103,68,-101,20,68,78,116,108,-113,10,27,-36,30,77,-46,16,126,-33,-3,93,-8,9,50,-4,-35,85,-69,27,-77,-27,-63,-21,36,-26,65,-98,127,89,-12,9,-13,119,113,-32,-111,101,-51,-119,50,-67,111,113,-67,-60,30,-93,-95,4,83,21,23,-110,-65,61,110,7,-4,-81,-12,1,-79,-71,-88,93,94,-63,10,34,-120,-99,-11,78,15,12, 
  /* [18][0][][] */ -78,103,64,-78,-26,-104,-88,-41,-37,48,-118,-39,-41,38,51,-82,27,-35,30,-28,44,-39,23,-70,65,-93,-40,79,24,-4,-24,35,36,-14,-85,-127,-62,-12,-98,60,-57,-25,-101,-27,-101,-22,-40,-31,-24,-38,19,-8,-125,-19,-15,80,-92,29,-47,-117,53,79,26,21,-91,-121,-36,72,58,-84,-76,74,-114,-91,-111,-112,41,54,-21,-125,-77,-27,-29,-99,80,-8,48,8,-125,-97,-83,80,54,-81,19,-44, 
  /* [19][0][][] */ -19,0,37,5,26,-95,57,44,43,-17,-4,-38,-112,-6,-59,20,30,-120,127,26,-51,33,-73,-14,40,-87,-6,-80,-96,-122,-79,9,47,-101,-4,-21,-16,-84,-74,-114,14,-121,-94,-17,-95,-10,29,-102,3,-4,-57,14,-53,-12,-18,-40,-4,54,-26,-53,22,-71,62,29,-82,-27,-56,-34,-38,15,31,-67,-83,-123,-78,-91,-44,-112,-18,63,24,-122,-48,41,-103,-30,-19,-33,51,1,-36,27,-46,92,36,-63, 
  /* [20][0][][] */ -28,13,52,72,-55,70,24,8,-13,19,-68,18,-22,51,-27,-91,-41,-44,-75,-29,-37,-70,-74,-69,35,-48,-88,6,23,13,-15,70,83,31,-28,38,44,-19,1,-91,-51,-15,-127,-107,-30,-82,-82,55,21,-113,-66,38,47,93,54,-9,83,42,84,38,64,-33,-60,-11,-14,-64,-59,-12,-73,-63,-84,56,-51,-52,2,15,63,70,-3,32,59,2,50,5,21,76,0,6,24,8,-25,52,3,-5,5,7, 
  /* [21][0][][] */ 82,98,71,-127,118,-89,100,17,-39,-46,-59,23,-19,28,-52,-91,-111,-17,40,-22,79,-56,68,-86,55,-59,-59,76,49,41,32,-17,13,28,-80,-92,103,85,-85,-52,27,33,17,-40,-114,-125,-122,63,2,-81,16,112,59,101,-83,23,-10,45,-26,93,55,-75,49,20,96,38,-36,-66,-90,-104,-5,82,14,-58,60,86,-100,-56,43,73,14,90,37,-25,-1,-52,71,-59,-85,61,52,-103,-24,-31,79,-64, 
  /* [22][0][][] */ 48,-38,-70,-112,32,-74,29,-17,-17,82,-89,-108,96,-35,-53,-80,-13,76,-69,-62,94,-21,10,-12,69,2,-102,53,-44,-79,-68,-117,32,52,28,16,-32,-45,-90,-114,-27,-29,-20,48,8,-105,101,-35,6,-45,0,-33,-76,-68,-70,13,12,-89,-34,-45,44,-83,-38,-127,-62,-2,-60,-10,94,52,-4,-35,-88,-20,-10,-106,7,-58,82,55,48,-92,-81,-108,41,83,52,-14,-25,10,-47,25,24,44,-33,52, 
  /* [23][0][][] */ 24,-110,-20,38,34,-68,-4,-106,19,-102,30,52,1,-92,-29,-44,67,-64,-126,61,13,-84,67,-53,-21,-58,55,-19,24,-10,26,-36,-69,2,-16,-11,75,-19,-90,-12,-127,6,-20,-99,-41,-88,60,31,22,-104,-62,-36,38,-57,-37,61,-97,-28,92,19,-75,-72,-67,-8,13,-12,-120,-96,15,-11,74,-99,-6,-31,-40,-72,25,-2,13,78,-57,-52,-15,-104,71,2,85,-58,-112,-15,53,-31,24,-78,-35,55, 
  /* [24][0][][] */ -29,11,-83,-76,-48,-80,-16,-55,42,99,91,11,79,57,-29,-43,-46,49,48,-43,55,-35,-12,-15,68,-7,67,79,111,73,25,-4,-16,22,47,46,-45,-66,45,6,-16,-56,127,24,16,-29,21,104,-30,-38,-4,52,52,78,43,-20,25,77,43,54,100,-6,69,87,-61,90,-27,-38,-61,8,-62,-25,-32,-11,95,89,77,-60,-78,-22,-64,-57,-53,-92,48,84,6,-39,9,-44,1,-50,7,40,-44,-10, 
  /* [25][0][][] */ -100,-68,-59,-11,83,-42,-71,34,-24,-87,-34,17,41,-37,-127,-30,-50,27,5,-87,-13,17,-22,-53,-2,-36,-82,24,63,-53,42,85,64,-89,14,66,106,-56,-3,-16,-47,87,-87,-7,80,9,9,20,-104,46,-40,37,49,-21,-44,-8,18,35,-63,58,93,40,27,47,10,51,-46,-31,-79,-7,-57,-102,21,-110,43,17,63,82,-41,1,40,28,-53,83,-78,-47,-74,-91,-7,-57,36,26,-110,-32,-22,-92, 
  /* [26][0][][] */ 11,-65,-28,-45,-99,-34,-36,0,-88,-111,42,28,-93,-64,-17,11,49,-29,-68,-75,3,21,63,-11,-6,19,20,37,-24,54,-91,-37,-54,-63,-116,-118,-61,28,-50,43,-92,53,46,40,-63,54,-59,59,-23,-6,-38,45,-13,-53,-34,-100,45,1,31,-11,-10,-91,-1,-46,51,-22,-45,12,-95,20,31,34,32,-95,-56,-20,16,-109,-31,24,-47,22,40,-77,36,-2,-60,70,-37,127,-7,-4,-71,97,5,30, 
  /* [27][0][][] */ 29,-11,-49,-91,-80,-41,-39,-17,10,95,37,-74,-8,52,78,-32,68,-4,55,-72,-96,25,-15,29,-123,49,-65,-13,81,35,-5,16,63,75,-51,-66,-96,-56,-96,100,-73,-18,-4,37,105,-27,52,77,71,56,16,-81,-76,-37,-6,2,69,4,-127,-48,-7,-18,-12,62,45,-23,-79,95,61,-36,-120,9,43,-73,-5,-74,78,-63,45,89,57,0,64,-92,-42,-49,-18,23,-56,-40,-72,-10,59,-6,62,6, 
  /* [28][0][][] */ 19,-10,-1,17,-47,-40,-47,36,-21,-41,14,-9,-49,-42,15,37,25,47,56,30,71,3,-48,-48,-28,37,-29,-31,-46,-16,-16,-25,-71,-3,22,72,-2,-17,-32,13,35,11,-22,5,-47,17,-3,9,3,-13,20,22,-51,-31,31,-4,60,-17,23,3,-18,-44,-33,-5,43,1,71,13,-7,17,-35,2,9,104,-20,-58,-58,30,49,-5,-40,-55,127,-20,3,-45,11,5,-17,25,-2,-51,73,41,-19,-2, 
  /* [29][0][][] */ 4,13,70,-61,-83,-9,-124,-36,36,-42,-100,-113,52,-108,-75,-27,-108,40,-3,-61,-77,-52,18,14,-71,-27,-25,0,-103,-2,40,-41,-3,-38,-97,-74,62,49,-30,50,-2,81,15,67,-8,60,-65,2,-17,-37,57,-41,81,-115,49,5,-110,13,17,30,-59,61,-113,-65,18,-64,10,33,34,-96,-4,-68,68,35,35,5,86,-20,8,52,30,-100,-40,-51,29,60,-8,124,-61,127,34,66,-115,-18,22,16, 
  /* [30][0][][] */ -7,-58,-78,-3,-102,-1,-76,-17,73,-36,-21,-53,-121,-13,22,-8,-34,11,63,-116,2,-98,-106,-15,-100,-2,-81,89,-18,-98,-93,-20,-99,-95,-127,-73,13,-40,-11,10,62,-81,-20,76,63,-65,66,43,-75,35,8,-93,83,-53,-32,68,-82,-70,-74,-73,-95,-28,-70,-30,-107,-103,-105,47,-87,68,10,-53,-89,80,29,-100,-71,-66,-83,-72,3,-13,-97,-20,-107,5,-115,76,-43,-113,39,25,-56,-24,-11,-83, 
  /* [31][0][][] */ 62,-45,28,67,43,79,-30,-79,-74,-22,-60,-62,68,-127,-76,109,-12,-63,36,49,-14,12,3,100,57,-91,51,57,-53,-43,26,105,-8,19,-81,21,96,-42,-67,-58,50,-32,17,50,40,-44,-72,35,63,-6,88,33,-81,-64,-63,29,-58,64,31,126,6,2,73,-58,64,89,-39,-66,46,-73,-106,-22,-90,-46,9,0,-15,2,20,91,-52,-44,15,38,55,85,-70,37,-10,-18,-93,-24,20,81,-31,-51, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023846852127462626, 0.0022962167859077454, 0.0023955528158694506, 0.0021955040283501148, 0.0029318288434296846, 0.0029687418136745691, 0.0023096494842320681, 0.0026674666441977024, 0.0021842143032699823, 0.0024245271924883127, 0.0030376678332686424, 0.0022213652264326811, 0.003119476605206728, 0.0022063569631427526, 0.0031599842477589846, 0.0030516486149281263, 0.0032522385008633137, 0.002085717860609293, 0.0020989393815398216, 0.0021677287295460701, 0.0024518317077308893, 0.0019417543662711978, 0.0025015277788043022, 0.0026799277402460575, 0.0025650304742157459, 0.0022974314633756876, 0.0026308491360396147, 0.0022850499954074621, 0.0051142354495823383, 0.0024271798320114613, 0.0020367256365716457, 0.0024468465708196163, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 541, -199, 2991, 7068, 3108, -3639, 3375, -1755, -3527, -1073, 3306, -2624, 2551, 6568, 1586, 1814, -999, -1598, -1181, 3458, 2364, -1290, 2406, -795, -1086, 2191, 676, 1418, 4636, 2305, 2437, 879, 808, 2864, 6080, 3123, -790, 2170, 1948, -4801, -486, 342, 143, 897, -1211, 155, -1159, 499, -5005, 2340, 655, -3498, 3324, -754, 1238, 880, 684, 1440, -1452, -1812, 77, 1031, 111, 2649, 5135, 2516, 2678, 4690, 2636, -1296, 2413, 6592, 2224, -1148, 4820, 5547, 42, -3720, 898, 453, 7204, 1134, -1242, -1904, 1207, -345, 1782, -1582, 3238, -1347, 4626, 424, -1197, -3948, -646, 624, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00018489906506147236, 0.00024228995607700199, 0.00015491292288061231, 0.00010364080662839115, 0.00018829408509191126, 0.00013366996427066624, 0.0001614294305909425, 0.00014320181799121201, 0.00016596705245319754, 0.00016087516269180924, 0.0001772479445207864, 0.0001838797761593014, 0.00019788164354395121, 9.4335540779866278e-05, 0.00024873693473637104, 0.00023617190890945494, 0.00022263155551627278, 0.0001530916488263756, 0.00020358579058665782, 0.00014385675603989512, 0.00015849739429540932, 0.000168631348060444, 0.00010400809696875513, 0.00019937011529691517, 0.00023843989765737206, 0.00018354160420130938, 0.00023526993754785508, 0.00017494363419245929, 0.00015009788330644369, 0.00017504984862171113, 0.00019640865502879024, 0.00022651269682683051, 0.00021582016779575497, 0.00018910410290118307, 0.00010837545414688066, 0.00014903956616763026, 0.00017687190847937018, 0.00017012894386425614, 0.0001965015399036929, 0.00011575413373066112, 0.0003280648379586637, 0.00018939717847388238, 0.00025258501409552991, 0.00017529676551930606, 0.00018609603284858167, 0.00015665820683352649, 0.00024186813971027732, 0.00021081288286950439, 0.0001344482006970793, 0.00013451142876874655, 0.00020715431310236454, 0.00014294982247520238, 0.00019897845049854368, 0.00021595590806100518, 0.00018798669043462723, 0.0002163297904189676, 0.00022009361418895423, 0.00023323828645516187, 0.00020876032067462802, 0.00021078325517009944, 0.00027378497179597616, 0.00014428335998672992, 0.00024215380835812539, 0.00022951446590013802, 0.00012672336015384644, 0.00017416480113752186, 0.00015967419312801212, 0.00013039103941991925, 0.00023717203293927014, 0.00017652296810410917, 0.0001538781652925536, 9.8710654128808528e-05, 0.00018129174713976681, 0.0002496454690117389, 0.00013739154383074492, 0.0001340903399977833, 0.00013110018335282803, 0.0001688680931692943, 0.00017864638357423246, 0.00015951920067891479, 0.00011512055789353326, 0.00016568748105783015, 0.00017408994608558714, 0.00023076494107954204, 0.0001554797199787572, 0.00020935270003974438, 0.00014371702854987234, 0.00024957556161098182, 0.00014931317127775401, 0.00017811422003433108, 0.00011621457088040188, 0.00030024501029402018, 0.00012599276669789106, 0.0001073396997526288, 0.00020852134912274778, 0.00020479115482885391, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 3,88,-63,42,6,-37,78,12,-75,13,23,-112,127,87,-86,11, 
  /* [1][0][][] */ -2,24,-37,-19,-27,47,25,-127,19,-39,-20,-68,16,-26,-43,-17, 
  /* [2][0][][] */ -15,-8,73,85,24,42,-122,127,-7,7,56,-82,-15,-64,-38,60, 
  /* [3][0][][] */ 101,-84,122,-12,1,-32,-30,127,-54,77,55,47,30,79,6,0, 
  /* [4][0][][] */ -2,-21,28,57,-94,11,-60,-127,-1,-3,-9,-15,62,28,89,65, 
  /* [5][0][][] */ 127,-6,-11,-25,-85,-3,53,110,38,-5,83,122,93,29,-102,46, 
  /* [6][0][][] */ -7,4,-35,-65,-58,33,-5,-67,-91,-50,-29,-27,127,64,124,-16, 
  /* [7][0][][] */ -75,37,5,-66,6,-34,-104,7,-99,87,-78,-100,-127,-33,24,91, 
  /* [8][0][][] */ 49,40,57,37,35,23,80,0,45,-22,31,-26,-127,-16,-82,-1, 
  /* [9][0][][] */ -66,127,46,-53,-44,-16,55,-50,-84,76,-74,14,104,127,39,16, 
  /* [10][0][][] */ 41,54,-67,27,-10,-34,81,-48,-78,-22,-30,-72,-127,-40,-22,63, 
  /* [11][0][][] */ 50,27,88,15,-4,-11,11,104,-126,17,-40,-9,25,-14,45,127, 
  /* [12][0][][] */ -42,-16,5,24,-1,18,127,-8,-93,24,7,-21,48,32,-61,109, 
  /* [13][0][][] */ 60,77,99,89,80,89,25,39,-77,84,-127,-101,103,70,-76,-80, 
  /* [14][0][][] */ -127,96,36,-10,-7,0,54,-6,-41,29,99,-38,-33,11,-11,26, 
  /* [15][0][][] */ -31,-35,-127,-47,75,-54,-70,-7,-3,6,-2,-34,-27,-57,-61,46, 
  /* [16][0][][] */ 113,-1,0,-36,27,-31,56,2,-31,18,127,41,1,23,-7,36, 
  /* [17][0][][] */ 47,35,3,-122,-38,-97,120,-127,3,8,-99,74,48,92,31,60, 
  /* [18][0][][] */ 22,121,27,-10,34,-57,-2,-65,-66,127,-35,3,22,13,-45,-29, 
  /* [19][0][][] */ -43,-59,127,-71,31,-96,54,-63,14,45,61,70,53,16,56,-40, 
  /* [20][0][][] */ -10,76,74,34,22,-7,-1,-33,85,0,78,-27,-127,-38,-114,-32, 
  /* [21][0][][] */ -89,49,7,31,58,54,38,48,-127,92,-78,3,-32,21,-92,-34, 
  /* [22][0][][] */ 14,-52,53,11,8,-127,109,-27,-2,-49,-56,-123,85,-84,-64,-83, 
  /* [23][0][][] */ -46,-126,51,69,31,-34,13,-28,35,-50,62,25,14,41,47,127, 
  /* [24][0][][] */ 18,12,23,78,48,25,-27,-127,59,4,-35,25,-5,8,-34,-45, 
  /* [25][0][][] */ -32,44,38,-68,-23,-14,17,-18,-43,74,-28,21,69,127,31,50, 
  /* [26][0][][] */ -77,55,-19,51,50,-78,-19,-31,25,-5,-5,71,21,-31,-127,102, 
  /* [27][0][][] */ -26,-127,-78,8,-63,98,25,-97,5,-28,60,-29,22,-53,-112,-39, 
  /* [28][0][][] */ -25,31,51,75,19,26,-29,-127,-121,34,82,-23,93,-19,-31,-25, 
  /* [29][0][][] */ -84,124,-5,-14,-50,38,-127,-88,-74,-35,-24,-25,43,-57,-81,53, 
  /* [30][0][][] */ 16,93,-10,74,-74,-53,-53,-25,-65,-11,11,-110,127,38,-11,64, 
  /* [31][0][][] */ 127,17,-46,-30,-66,3,83,33,-82,-10,36,64,65,-2,-19,12, 
  /* [32][0][][] */ -48,-29,127,39,-39,95,37,18,14,5,5,39,-33,99,57,39, 
  /* [33][0][][] */ -26,62,-48,-27,-26,36,127,-5,-3,-35,74,-75,124,85,-34,53, 
  /* [34][0][][] */ -88,-1,80,14,62,-65,127,8,-118,61,9,-9,30,54,-72,-51, 
  /* [35][0][][] */ 27,-14,-64,32,-90,92,-59,-31,19,127,-50,116,-90,61,6,22, 
  /* [36][0][][] */ -9,-127,117,-55,-72,22,-44,-17,23,32,-41,110,-7,-85,-44,52, 
  /* [37][0][][] */ 44,20,97,-1,81,-31,-71,-19,-62,127,-71,-31,-58,-26,75,-29, 
  /* [38][0][][] */ 56,55,28,-65,-35,4,-127,16,-74,44,-95,-83,-40,-58,-56,41, 
  /* [39][0][][] */ -107,4,-47,-44,-106,-102,50,41,-127,-60,22,119,22,-30,25,79, 
  /* [40][0][][] */ 127,5,-26,-44,-50,-2,15,-32,7,-5,-47,-23,-31,56,38,28, 
  /* [41][0][][] */ 70,-97,-17,-31,-9,-2,-91,-10,72,-10,-23,-109,127,-78,32,-9, 
  /* [42][0][][] */ 1,-84,-63,127,-2,-67,-90,-6,-28,-7,12,47,-69,75,-80,-10, 
  /* [43][0][][] */ -127,-57,-45,-98,-52,7,-24,58,65,-87,-60,12,-27,-84,-63,56, 
  /* [44][0][][] */ -14,9,47,-28,-37,-48,4,120,102,-62,23,127,103,3,-26,23, 
  /* [45][0][][] */ 5,89,-74,58,122,-127,-49,-83,118,-57,81,-86,-77,74,-77,34, 
  /* [46][0][][] */ -20,-25,-15,17,127,-13,43,33,15,91,-47,-119,6,40,-48,53, 
  /* [47][0][][] */ 90,-71,-62,4,64,-26,-51,-50,5,120,-28,65,-19,-127,-82,23, 
  /* [48][0][][] */ -11,35,-22,-42,-6,-19,79,-127,8,0,-38,3,76,9,-32,10, 
  /* [49][0][][] */ -43,127,-40,24,23,-39,90,30,-70,38,56,-111,17,52,94,-86, 
  /* [50][0][][] */ -10,61,-29,-2,-127,11,-54,-63,50,78,56,18,-45,-24,-6,48, 
  /* [51][0][][] */ 127,-19,-32,-21,-55,96,-127,-46,36,-7,-69,53,-32,-68,12,38, 
  /* [52][0][][] */ 0,-4,54,59,-44,-36,-127,-20,-19,-27,-56,-64,11,-17,21,47, 
  /* [53][0][][] */ 33,127,49,-104,-12,98,46,-43,-48,-26,0,-37,118,-66,15,29, 
  /* [54][0][][] */ 4,118,12,-24,7,-81,-63,47,-14,-3,-26,127,62,83,17,48, 
  /* [55][0][][] */ -14,-16,59,47,31,-32,75,50,-59,-6,-3,11,127,24,-1,-10, 
  /* [56][0][][] */ 127,-15,4,35,-51,74,-60,-61,1,28,-70,7,-68,91,-26,54, 
  /* [57][0][][] */ -27,-9,-32,-12,-67,-53,28,-43,-127,-13,37,40,38,22,1,24, 
  /* [58][0][][] */ 37,-55,57,-8,31,-69,-6,36,55,-8,-127,-5,12,-17,-41,44, 
  /* [59][0][][] */ 80,-9,-127,115,-8,51,43,-28,-75,-36,-6,-92,-115,-62,21,93, 
  /* [60][0][][] */ 12,29,-9,25,-26,-29,-34,-4,-44,-64,36,127,-29,-115,-23,-7, 
  /* [61][0][][] */ -12,15,77,-86,-52,29,32,121,-28,-93,22,71,110,-11,42,127, 
  /* [62][0][][] */ 100,64,-28,-127,-52,7,3,-64,-31,49,-50,54,59,-41,-99,-100, 
  /* [63][0][][] */ 8,-1,10,0,-42,-41,-43,-6,-74,-9,-24,-11,127,-5,38,-25, 
  /* [64][0][][] */ 26,28,55,66,-127,-30,-57,-115,24,102,15,-18,100,-79,-18,78, 
  /* [65][0][][] */ -8,15,-39,9,-99,80,-3,-59,13,-127,58,-86,103,52,-112,29, 
  /* [66][0][][] */ -127,64,-76,-56,21,-33,-48,-60,-46,67,91,-30,-89,-47,29,50, 
  /* [67][0][][] */ -2,-34,-127,-103,68,72,4,-15,-25,1,47,-20,35,43,25,45, 
  /* [68][0][][] */ 17,26,-2,-53,-22,26,41,65,-17,80,127,-16,-39,-15,-96,-32, 
  /* [69][0][][] */ 96,-79,42,-50,26,-127,-6,119,-10,49,27,105,1,47,-17,8, 
  /* [70][0][][] */ 52,5,101,35,117,-27,119,89,69,-18,-83,74,-127,74,-78,76, 
  /* [71][0][][] */ -9,39,107,-106,-127,-109,33,8,-34,-2,25,-103,-102,32,19,16, 
  /* [72][0][][] */ -34,-84,35,-87,49,-16,-16,27,-75,14,-127,-13,73,79,-58,105, 
  /* [73][0][][] */ 39,3,0,20,100,-72,6,30,-4,36,-83,20,-86,-37,127,23, 
  /* [74][0][][] */ -60,-23,-125,-11,15,-21,-65,8,-73,-11,-127,-18,-11,-71,-40,82, 
  /* [75][0][][] */ 76,-25,46,-26,12,10,-122,-42,-28,-127,70,16,32,-41,-4,-12, 
  /* [76][0][][] */ -20,-34,-27,91,21,87,116,-84,82,-69,81,127,22,-56,-70,44, 
  /* [77][0][][] */ -9,-73,127,-25,1,-64,-28,-105,17,51,14,116,64,56,32,8, 
  /* [78][0][][] */ -35,11,69,-49,26,-33,54,63,21,14,122,-58,-93,-20,-127,-74, 
  /* [79][0][][] */ -105,-114,-50,56,73,44,-48,12,23,-13,-24,44,-11,-127,-109,12, 
  /* [80][0][][] */ 22,-84,74,100,-50,-8,-127,57,10,41,30,14,-44,5,-4,64, 
  /* [81][0][][] */ 121,48,10,80,-7,37,-2,127,45,-6,92,46,90,18,40,6, 
  /* [82][0][][] */ -76,-3,38,-15,42,-118,-127,-89,47,77,-29,-52,-40,100,-62,-70, 
  /* [83][0][][] */ 96,0,111,-23,-64,8,-127,20,35,-90,-2,-69,6,-5,34,15, 
  /* [84][0][][] */ 3,-78,-118,46,117,28,48,-12,-96,-1,-127,-33,17,-74,-118,12, 
  /* [85][0][][] */ -6,47,42,-2,70,-40,21,-59,127,-5,20,2,65,-84,-15,6, 
  /* [86][0][][] */ 127,-11,127,55,9,-45,82,34,-79,-48,-110,-33,70,0,-46,6, 
  /* [87][0][][] */ 3,-11,13,-55,73,-28,-37,22,33,-27,36,-33,-66,-127,-5,21, 
  /* [88][0][][] */ -30,-31,49,6,11,45,-90,-47,-16,27,-83,-127,-33,-18,-8,-2, 
  /* [89][0][][] */ -102,27,30,-99,45,15,-127,31,101,29,-80,-28,-19,-96,-72,-8, 
  /* [90][0][][] */ -24,-46,-52,-127,121,54,-120,35,62,64,58,-17,60,41,-96,-29, 
  /* [91][0][][] */ -1,-48,15,25,-41,-22,-13,45,-5,-25,-14,-13,-17,37,-1,127, 
  /* [92][0][][] */ -31,90,-16,-32,-11,42,-67,79,-4,-24,102,19,-46,127,70,25, 
  /* [93][0][][] */ -30,30,-60,-36,63,111,-127,-3,110,52,74,56,-118,-8,-74,66, 
  /* [94][0][][] */ 8,117,127,1,-117,-42,-22,-17,42,-22,37,-32,-82,-2,-12,-42, 
  /* [95][0][][] */ -3,14,23,-14,127,-52,-4,125,41,-38,-97,112,-24,-7,82,-13, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0018782222177833319, 0.0024612043052911758, 0.001573620131239295, 0.0010527931153774261, 0.001912709092721343, 0.0013578322250396013, 0.0016398155130445957, 0.0014546576421707869, 0.0016859091119840741, 0.001634185086004436, 0.0018005013698711991, 0.0018678682390600443, 0.0020101005211472511, 0.00095826934557408094, 0.0025266932789236307, 0.0023990566842257977, 0.0022615124471485615, 0.0015551195247098804, 0.0020680436864495277, 0.0014613105449825525, 0.0016100315842777491, 0.0017129732295870781, 0.0010565241100266576, 0.0020252205431461334, 0.0024220950435847044, 0.0018644330557435751, 0.0023898943327367306, 0.0017770940903574228, 0.0015247085830196738, 0.001778172911144793, 0.0019951376598328352, 0.0023009374272078276, 0.0021923216991126537, 0.0019209374440833926, 0.0011008881265297532, 0.0015139580937102437, 0.0017966815503314137, 0.0017281859181821346, 0.0019960813224315643, 0.0011758414329960942, 0.0033325138501822948, 0.001923914416693151, 0.0025657825171947479, 0.0017806811956688762, 0.0018903810996562243, 0.0015913489041849971, 0.0024569195229560137, 0.0021414572838693857, 0.0013657375238835812, 0.0013663797872141004, 0.0021042930893599987, 0.0014520979020744562, 0.0020212419331073761, 0.0021937005221843719, 0.001909586600959301, 0.0021974984556436539, 0.0022357318084686995, 0.0023692566901445389, 0.002120607066899538, 0.0021411562338471413, 0.0027811336331069469, 0.0014656441053375602, 0.0024598212912678719, 0.0023314296267926693, 0.0012872678926214576, 0.0017691825050860643, 0.001621985575184226, 0.0013245245208963752, 0.0024092160165309906, 0.0017931370530277491, 0.0015631089918315411, 0.0010027121752500534, 0.0018415787490084767, 0.0025359224528074265, 0.001395636354573071, 0.0013621024554595351, 0.0013317280681803823, 0.0017153781373053789, 0.001814706833101809, 0.0016204111743718386, 0.001169405528344214, 0.001683069160208106, 0.0017684221966192126, 0.0023441321682184935, 0.0015793776838108897, 0.0021266245748847723, 0.0014598912093788385, 0.0025352123193442822, 0.0015167373931035399, 0.0018093010876327753, 0.001180518651381135, 0.0030499172862619162, 0.0012798464158549905, 0.0010903668589890003, 0.0021181795746088028, 0.0020802880171686411, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 4719, 2492, 1844, 6637, 4210, 3046, -2324, 9020, 17486, -9505, -3827, 4916, -19139, 11056, 3988, 13293, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.9805170419858769e-05, 7.827382069081068e-05, 5.592964225797914e-05, 8.0091696872841567e-05, 7.2427152190357447e-05, 5.7661320170154795e-05, 5.7011729950318113e-05, 4.6047756768530235e-05, 9.5190371212083846e-05, 5.8980644098483026e-05, 5.8545589126879349e-05, 6.9509260356426239e-05, 7.6494841778185219e-05, 5.7372024457436055e-05, 0.00010114420729223639, 8.0002377217169851e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -76,13,75,-49,-65,-15,-59,4,-57,-8,18,-16,14,31,56,-7,25,-8,116,34,26,-50,81,91,-1,44,6,45,-66,-65,-117,-3,-35,-40,38,34,19,29,-7,40,-25,31,-75,45,-25,-53,18,107,-12,20,-43,-12,11,-20,0,-45,-127,17,-4,59,48,42,-19,22,-24,-80,-44,13,-47,-54,37,-51,-44,-15,-26,-73,-57,-28,-49,-5,-9,99,70,-24,40,44,29,53,44,-23,-2,-13,-22,-32,-62,44, 
  /* [1][0][][] */ 22,23,13,-26,-56,-5,-27,25,1,35,27,-42,-7,-31,-42,-43,-20,8,-55,28,-15,-77,24,37,36,-89,16,-37,97,-117,114,-47,64,49,-13,40,22,57,-19,-46,60,53,-4,-25,-1,113,-127,-66,-63,-70,-32,-26,3,-10,-7,22,31,38,21,36,6,26,-35,-83,-19,19,-39,-4,-36,10,-75,-8,4,-2,12,-73,44,46,42,-10,-60,1,-65,-46,9,-10,-15,15,-72,-14,-67,79,35,50,-60,48, 
  /* [2][0][][] */ 58,-28,31,1,-3,-110,52,65,23,-2,-6,12,-75,-42,9,-32,-127,-42,-45,64,32,-95,-60,57,3,-62,19,4,-44,84,-98,98,-52,86,-48,70,-40,10,-44,3,-97,96,46,58,-73,31,-20,7,14,28,-17,-41,20,-19,-46,43,15,-7,54,17,1,20,-54,21,68,32,-40,-24,33,81,-33,-25,37,27,62,19,0,-122,36,90,53,20,-3,37,-4,22,11,92,-36,-7,-38,5,-35,25,-42,50, 
  /* [3][0][][] */ -13,-21,-7,-15,28,-13,11,-90,-45,30,16,23,6,8,-59,52,18,-41,57,-8,5,127,9,-68,-14,40,-61,-2,50,-39,46,-32,-18,20,-7,-4,-4,39,46,-13,-84,-52,-25,-2,-6,21,26,14,-14,-50,5,-37,48,-91,-15,-30,23,40,-47,-4,6,-6,-29,2,24,39,3,2,-16,-19,-9,-93,-35,-38,28,-16,-6,-16,-21,-29,-3,-22,-53,29,1,-57,0,-19,10,45,14,-36,34,20,0,64, 
  /* [4][0][][] */ 27,45,-14,43,49,5,-39,-54,-39,78,74,-25,28,-5,6,-65,11,-2,-46,32,12,-20,64,73,-58,-11,-127,-4,-64,-80,18,4,-69,-47,31,34,-18,6,8,26,-37,-74,43,-35,-3,-66,-39,59,-26,34,7,27,54,24,-92,48,93,-48,15,-11,36,-18,37,30,-33,-1,-7,16,-14,11,-47,54,33,-64,-76,-32,57,-27,9,-28,-63,42,-91,-14,-48,37,8,-24,72,-2,19,1,-61,-57,61,39, 
  /* [5][0][][] */ -79,25,2,-11,10,18,59,-38,-30,31,-29,-50,41,4,-30,-52,26,-43,66,-1,-127,-4,-69,34,-74,15,45,20,51,-83,-4,43,33,111,19,46,-7,24,27,-16,-24,79,55,-17,15,66,60,4,-3,22,-9,24,49,-61,31,-62,30,-64,-78,-83,91,84,-46,1,85,-53,-51,-61,-67,-3,-53,-8,-40,11,-30,-49,3,-46,-13,0,96,-11,36,-48,-91,-9,21,-32,-37,80,34,-3,10,42,1,70, 
  /* [6][0][][] */ 45,33,-70,76,-9,-85,58,98,-7,71,-19,111,-98,-107,63,13,10,-54,-69,9,-1,-19,-39,-48,-16,14,91,7,86,29,127,-48,45,-1,4,-108,35,-5,35,48,31,18,-46,-17,-52,-63,-97,-1,21,-106,-69,53,-16,45,-15,-66,83,64,70,13,-118,31,-84,0,-2,24,-45,49,61,15,15,5,9,39,43,95,71,-1,34,-88,-42,-46,-109,22,-15,-10,60,18,-68,14,60,48,-52,-24,-50,87, 
  /* [7][0][][] */ 23,107,-38,-55,-26,-65,39,-53,-60,29,-8,-31,-4,14,-8,-25,-51,-37,-51,80,13,111,-28,59,-17,18,11,30,14,69,45,-45,67,15,-13,27,-1,3,12,55,-106,-28,-1,-18,20,-127,85,-7,66,-70,-75,-34,-4,-8,-48,17,36,-45,-93,8,25,118,9,-13,-13,-30,-63,10,-1,-46,-67,2,-28,16,-43,58,-61,17,10,-119,-7,-83,49,-62,71,1,-32,35,30,40,-91,20,87,-62,-48,38, 
  /* [8][0][][] */ -11,72,-46,30,-44,-17,-67,-26,-118,-32,3,-34,-13,39,32,65,14,-38,-8,6,19,10,-8,-18,-48,68,-17,-2,-32,-50,-43,-25,-32,-52,-7,-63,-52,20,47,5,-9,-48,29,-3,-13,-102,12,4,0,-41,43,45,52,-16,-80,127,-4,-9,3,-50,-18,32,20,66,-3,-71,5,-6,-39,2,-10,-31,-51,-47,-106,-38,-33,28,-47,-75,12,-31,-36,-11,-23,-20,1,45,43,83,-51,-34,-59,-127,22,-65, 
  /* [9][0][][] */ -51,28,-85,59,-28,-67,58,39,-22,67,-21,77,-14,-13,11,110,12,9,38,4,-11,13,55,-95,-15,-35,44,-20,7,-37,57,47,-9,15,9,-127,17,-47,0,5,9,43,79,-26,7,17,15,26,50,59,40,-34,-73,-53,11,17,59,28,106,-8,-48,76,-60,-42,103,6,-2,23,-113,16,17,27,16,85,-20,-21,-2,41,-26,3,21,-45,75,-25,20,18,-33,-26,-23,27,-18,7,77,19,-48,-9, 
  /* [10][0][][] */ 39,34,-85,-17,-41,-10,70,-13,9,-30,21,17,-91,-34,-13,-38,-63,-28,-14,33,43,10,-2,2,-38,70,27,-16,-47,-74,-13,3,85,-40,49,7,87,-59,75,113,10,-51,11,22,-33,-127,-9,40,49,71,-83,-62,-1,34,15,36,34,-74,86,52,5,66,-36,-25,-10,-63,-21,50,36,-15,21,74,104,45,17,-52,25,-55,39,-31,-42,26,23,6,-35,19,-7,52,-27,13,47,33,63,28,-65,-30, 
  /* [11][0][][] */ -22,-1,62,-45,47,-8,-29,-47,38,-49,40,33,-9,-16,31,26,-34,-2,30,27,-20,24,-60,-55,5,12,-15,43,5,-12,12,-39,14,-21,7,-33,-35,25,-59,1,-75,15,-12,54,2,-68,3,-17,38,-19,-56,-34,27,30,30,-56,-53,-53,31,-30,-39,-24,-7,-70,-30,-56,24,66,127,10,92,-2,-52,-27,19,-3,57,12,8,-2,70,-6,-27,49,57,48,8,6,-36,-52,23,-30,21,15,36,52, 
  /* [12][0][][] */ 39,-16,16,-23,33,71,-12,93,81,60,1,94,4,35,9,12,-41,50,35,45,127,-41,57,-23,41,30,-35,-39,-3,86,-12,-9,57,-19,-6,-35,75,7,-35,-17,15,-2,11,93,-39,117,6,-18,-79,38,-12,25,-51,-26,11,-23,-81,89,12,57,5,-102,33,-107,-20,75,-52,-33,4,-36,70,48,17,19,-2,78,-28,14,-72,35,-65,76,92,8,28,74,9,-80,24,-7,-67,69,53,9,-30,-58, 
  /* [13][0][][] */ -15,43,-41,-5,-44,-57,-20,-29,55,5,-30,-63,46,-126,-48,-115,-54,-1,-127,-11,-96,-58,28,127,-32,-20,117,3,22,-35,71,48,26,-1,-119,108,-74,-52,10,-19,106,13,-17,47,-6,-43,41,-21,56,-16,-63,17,5,12,-6,74,122,-62,-4,13,55,14,-22,-100,-10,60,-76,19,-98,-10,-88,-17,-34,19,-92,-67,-71,12,8,103,-89,91,64,-110,99,53,26,-6,-39,-37,-19,22,-65,-17,-58,-5, 
  /* [14][0][][] */ -18,7,-93,-38,53,35,-72,-36,29,-41,69,-29,13,-4,-25,-64,-59,24,27,127,11,-55,-22,20,-18,26,-16,72,10,3,-45,-3,43,4,-25,35,-33,43,85,22,15,31,11,32,15,-24,70,-20,13,-16,3,-29,58,5,-34,37,17,37,-61,14,16,-38,-51,-98,21,-43,-24,-13,-102,42,-32,-1,-14,-59,-12,-55,40,-42,-40,-7,28,14,16,-3,12,34,-11,-6,4,36,44,17,39,-36,-59,-34, 
  /* [15][0][][] */ -70,-54,31,-31,33,-21,-17,-18,-5,-10,8,82,-26,-7,9,69,-85,5,10,-56,58,-41,-13,-69,10,11,26,-19,-63,-55,-68,4,-46,36,43,-56,4,-11,-1,-1,-37,-20,-1,-1,-23,2,69,60,-43,26,15,-3,-35,19,-4,-59,-127,-28,57,12,-42,-10,-52,24,-66,-30,-27,28,67,-51,92,9,10,-53,-22,-20,-21,-6,13,23,-17,87,50,20,31,-27,-98,0,-29,-57,-39,13,50,-23,-22,40, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002116719726473093, 0.0033266374375671148, 0.0023770097177475691, 0.0034038971643894911, 0.0030781538225710392, 0.0024506060872226954, 0.0024229984264820814, 0.0019570295698940754, 0.0040455907583236694, 0.0025066772941499949, 0.0024881875142455101, 0.0029541435651481152, 0.0032510305754840374, 0.0024383109994232655, 0.0042986287735402584, 0.0034001010935753584, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -1970, 2046, -1429, -4328, -1691, -2260, 399, -4478, -318, -1801, 9088, -1163, 4867, 16759, 4436, -3201, 8911, -1722, -3205, 2586, -8343, -2480, 5355, -1311, 1146, -2667, -4814, -4232, -3061, -11062, 1936, 2625, 10673, -5522, 1872, -139, 2269, -1030, -166, 2501, 2861, -767, 3020, -1949, 8611, 11025, -1860, 17247, -1871, 9108, 7752, -508, 624, -2263, -921, 5648, -501, 777, 9142, 9668, 4501, 10814, 5077, -6411, 1276, -5022, -1735, 6149, -4819, -1923, -10716, 3292, 6612, -2613, 753, 9825, 2004, 4167, 3723, -411, -500, 12474, -2629, 7873, 9071, 8391, -7331, -4453, -1986, -5176, 21253, -826, 737, 1363, -1425, -2388, };
const TfArray<96, float> quant10_scale = { 96, { 0.00022404341143555939, 0.00019531177531462163, 0.00012618053006008267, 0.00017271225806325674, 0.00020008668070659041, 0.000229660450713709, 0.00026101749972440302, 0.00017483148258179426, 0.00029547189478762448, 0.00016644276911392808, 8.4042192611377686e-05, 0.00062280974816530943, 0.00019848402007482946, 9.9627235613297671e-05, 0.00014524883590638638, 0.00019103780505247414, 0.00013955049507785589, 0.00022058964532334358, 0.0001930536818690598, 0.00010923962690867484, 0.00016863274504430592, 0.00033923209412023425, 0.00022576210903935134, 0.00030214842990972102, 0.0004588770680129528, 0.0001639823749428615, 0.00025128436391241848, 0.00010974031465593725, 0.00021024857414886355, 6.3621577282901853e-05, 0.00046455158735625446, 0.00018577282025944442, 0.00019113576854579151, 0.00013838477025274187, 0.00019585265545174479, 0.00034140085335820913, 0.00017736006702762097, 0.00035458570346236229, 0.00029983732383698225, 0.00013834414130542427, 0.00017959196702577174, 0.00024568720255047083, 0.00023486123245675117, 0.00018131172691937536, 9.122104529524222e-05, 0.00021755992202088237, 0.00023995769151952118, 6.538924208143726e-05, 0.00019932303985115141, 0.00010759392171166837, 0.00011767657269956544, 0.00014401467342395335, 0.00019070085545536131, 0.0001375463034491986, 0.00023476118803955615, 0.00020479467639233917, 0.00020806373504456133, 0.00021809923055116087, 0.00019550713477656245, 9.7458745585754514e-05, 0.00024148215015884489, 0.0001301704760408029, 0.00011918736709048972, 0.00012256686750333756, 0.00018077707500196993, 0.00022709857148583978, 0.00034441589377820492, 0.00015805540897417814, 0.00018422958964947611, 0.00014366299728862941, 0.0001078279601642862, 0.00011416030611144379, 0.00012258579954504967, 0.00019489933038130403, 0.00026314944261685014, 0.00012082789908163249, 9.5354087534360588e-05, 0.00013250934716779739, 0.00015487370546907187, 0.00022477851598523557, 0.0002852091274689883, 0.00015901881852187216, 0.00023793557193130255, 0.00010931844008155167, 0.00010757303243735805, 0.00010286202450515702, 0.00012322605471126735, 0.00019399802840780467, 0.00025715111405588686, 0.00016879101167432964, 4.9714366468833759e-05, 0.00023753056302666664, 0.00018757332873065025, 0.00027473698719404638, 0.00017161894356831908, 0.00021168212697375566, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 57,62,-5,19,-43,4,61,68,78,-62,-111,88,-46,-62,44,-37,-127,59,-8,54,83,74,18,73,-3,2,-49,-4,34,-41,34,-30,6,32,-36,81,-26,111,-9,-11,11,-37,-58,22,-66,26,18,-10,3,-70,86,-33,110,99,-60,38,-127,-83,-61,-127,-127,-8,-127,4,-49,84,18,-93,-29,75,127,-55,-46,-37,39,-62,35,-66,-44,8,-13,-16,65,-88,-124,-127,-17,22,-84,-20,-61,-31,77,-36,83,-24, -21,-64,-21,30,-11,107,-7,29,107,8,-96,43,-92,-40,-49,22,-58,34,10,92,127,44,56,127,-5,4,35,14,-3,127,-24,-127,49,127,3,-9,63,102,-54,-127,127,11,42,127,-25,22,127,-112,13,-127,49,-52,-68,127,15,-127,1,49,-7,-113,-6,-62,-11,61,-56,127,20,-1,14,127,125,-26,-127,11,-35,-127,65,-77,-5,127,-9,-3,127,-127,-127,-63,127,59,88,20,-127,-6,127,-32,127,1, 56,-122,6,-2,-10,-25,-11,125,-8,33,-67,92,-46,-34,64,-25,-48,2,-4,127,67,35,30,32,-15,-54,7,59,23,28,14,-78,-19,-54,-45,73,-25,13,37,40,-10,48,-16,27,17,-127,12,4,51,-65,6,-21,57,-1,48,92,69,-122,-16,-59,-38,-22,-121,31,34,6,-52,-73,-26,-7,114,26,-18,-29,-2,-36,11,-60,-84,51,28,-127,46,-66,29,-93,28,-3,-10,-5,-7,54,25,34,18,-33, 
  /* [0][1][][] */ 125,-6,39,127,1,-31,104,32,-48,-106,-24,127,48,-127,-54,43,1,-44,65,-5,-44,-16,-127,-40,-48,104,-120,127,-46,82,90,23,1,120,27,127,-123,29,-5,-2,64,-127,3,18,-127,-38,24,-81,-91,-87,-31,8,80,-48,72,24,-127,-1,-60,-42,-59,-52,-20,46,-115,-8,127,-125,-45,13,6,-127,-39,100,110,-99,64,61,-1,-27,127,-95,-25,112,-56,-62,10,127,-17,66,-122,-14,-18,-88,55,1, -127,18,-58,51,-70,-110,-127,-127,80,40,-67,-43,-127,-60,-38,127,17,-127,127,60,51,-127,-85,40,-127,91,37,48,-81,51,-127,1,-127,108,127,-78,44,127,127,-69,-50,56,-2,61,-25,63,-65,-115,36,-93,-121,127,-97,43,77,-56,50,7,66,-16,22,46,-40,127,22,-95,58,127,29,49,-87,-47,26,90,-127,-80,127,126,123,-23,-71,25,-82,67,-42,-116,65,94,127,115,-105,-127,-93,-79,17,127, 68,13,29,24,5,-43,-15,62,-29,127,-127,66,22,-49,-127,66,56,-21,-17,5,-89,17,-78,-13,-11,37,127,35,127,104,47,-114,-34,-99,-18,77,-127,-22,-13,33,7,96,23,23,11,-28,31,-127,127,-26,-91,-18,-29,-69,-127,40,83,3,-127,6,17,-55,45,43,127,-11,-40,-41,-47,-17,1,-74,-18,-127,-27,-51,-34,-72,-127,-43,-68,-59,-8,104,-102,-11,65,15,-43,-45,-57,93,-19,127,14,-10, 
  /* [0][2][][] */ 4,-127,57,13,28,47,4,67,-77,-79,-15,9,-22,-50,-10,49,-46,80,-1,-22,39,60,-4,-18,2,-15,17,-19,-29,-9,-29,10,-43,21,-79,-36,21,-53,6,-1,-39,6,-18,-71,12,-125,-31,-68,-68,-9,-55,20,127,-7,-47,-39,-12,-44,10,43,-49,-61,67,4,-35,47,-25,-17,60,5,100,70,-53,43,12,46,-103,-78,14,-25,2,-60,-16,-58,-2,7,-35,60,-61,127,-54,78,-37,-1,-20,-59, -73,3,127,44,127,127,-53,31,-127,5,-77,-64,97,-85,17,11,-10,72,-3,-62,20,36,40,-26,60,-127,10,66,1,125,-42,0,-90,24,-23,-62,70,13,-5,-81,-66,1,-127,-52,1,-47,-2,-98,-13,-19,-127,56,74,-70,-48,-92,13,127,-43,57,46,-127,94,53,-26,37,-92,13,127,-10,61,100,-83,46,-43,-72,-87,-127,-17,-74,-25,-45,-47,-124,83,118,61,38,112,46,7,106,-53,-16,-31,-40, 5,84,89,19,11,45,-19,-10,-34,66,-10,20,-27,-53,-4,31,-28,-6,-12,3,2,18,-20,-14,-3,27,17,46,70,45,-32,-64,-18,-42,-59,-67,11,-27,-36,-52,-37,-14,24,-45,-14,-121,-28,-78,-7,-5,-85,-16,-11,35,24,1,44,48,64,92,-62,-34,41,-24,34,21,-62,34,58,1,105,51,-6,-39,-12,36,-63,-14,11,-59,-13,-103,-11,-74,27,35,22,38,-94,50,-26,96,-31,-1,-30,-56, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0095218447968363762, 0.0083007505163550377, 0.0053626727312803268, 0.0073402710258960724, 0.0085036838427186012, 0.0097605688497424126, 0.011093243956565857, 0.0074303378351032734, 0.012557554990053177, 0.0070738173089921474, 0.003571792971342802, 0.026469413191080093, 0.0084355706349015236, 0.0042341575026512146, 0.0061730756424367428, 0.0081191062927246094, 0.0059308959171175957, 0.0093750599771738052, 0.0082047814503312111, 0.0046426840126514435, 0.0071668913587927818, 0.01441736426204443, 0.0095948893576860428, 0.012841307558119297, 0.019502274692058563, 0.0069692507386207581, 0.010679584927856922, 0.0046639633364975452, 0.0089355641975998878, 0.0027039169799536467, 0.019743442535400391, 0.0078953448683023453, 0.0081232702359557152, 0.0058813523501157761, 0.0083237374201416969, 0.014509535394608974, 0.0075378026813268661, 0.015069892629981041, 0.012743085622787476, 0.0058796261437237263, 0.0076326583512127399, 0.010441706515848637, 0.0099816024303436279, 0.0077057485468685627, 0.0038768942467868328, 0.0092462962493300438, 0.010198201984167099, 0.0027790425810962915, 0.008471229113638401, 0.004572741687297821, 0.0050012543797492981, 0.006120623555034399, 0.0081047862768173218, 0.0058457180857658386, 0.0099773500114679337, 0.0087037738412618637, 0.0088427085429430008, 0.0092692170292139053, 0.0083090532571077347, 0.0041419966146349907, 0.010262991301715374, 0.0055322451516985893, 0.0050654630176723003, 0.0052090920507907867, 0.0076830256730318069, 0.0096516888588666916, 0.014637675136327744, 0.006717354990541935, 0.0078297574073076248, 0.0061056772246956825, 0.0045826882123947144, 0.0048518129624426365, 0.0052098962478339672, 0.0082832211628556252, 0.011183851398527622, 0.0051351855508983135, 0.0040525486692786217, 0.0056316470727324486, 0.0065821320749819279, 0.009553086943924427, 0.012121387757360935, 0.0067582996562123299, 0.010112261399626732, 0.004646033514291048, 0.0045718536712229252, 0.0043716360814869404, 0.005237107165157795, 0.0082449158653616905, 0.010928922332823277, 0.0071736178360879421, 0.0021128605585545301, 0.010095048695802689, 0.0079718660563230515, 0.011676321737468243, 0.0072938050143420696, 0.0089964903891086578, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 7187, 1870, 612, -965, 5933, 6773, 9435, 1075, -1337, 6976, 976, -9119, 5380, 2923, 990, -1147, 3237, 6619, -44, -320, 3126, 12645, 23080, -1803, -3793, -946, 10367, -909, 1547, 1838, 11951, -840, 6870, 3929, 10902, -3594, 338, -6004, -436, 1048, 2172, 778, 1240, -237, 49, 6095, 2208, 3087, 5176, 1889, 6750, 2650, -2843, 2911, 1100, 3085, 758, 2150, 6428, 1574, -2124, 4540, 4102, 3734, 4059, 9665, -5108, 2468, 2234, -630, 4482, 485, 1881, 2650, 4590, 2280, -117, 2334, 1674, 2587, 2325, 3785, 4686, 1329, 1908, 7172, 1122, -1316, 12834, -313, -189, -1856, 12945, 3138, -411, -376, };
const TfArray<96, float> quant12_scale = { 96, { 9.709309961181134e-05, 0.00015198855544440448, 0.0002418804942863062, 0.00014775116869714111, 0.00011750504927476868, 0.00012042321759508923, 8.5519772255793214e-05, 0.00018865974561776966, 0.00015476267435587943, 0.00010958014172501862, 0.0001621492556296289, 7.8411234426312149e-05, 0.00012930876982863992, 0.00019334543321747333, 0.00011502367851790041, 0.00015330336464103311, 0.00015531374083366245, 0.00012104996858397499, 0.00019176880596205592, 0.00016159442020580173, 0.00018205273954663426, 7.5710624514613301e-05, 4.3073465349152684e-05, 0.00019743957091122866, 0.00016572144522797316, 0.00017051349277608097, 9.2476584541145712e-05, 0.00012636203609872609, 0.00017178204143419862, 0.00016807815700303763, 8.1623264122754335e-05, 0.00019459890609141439, 0.00012010536738671362, 0.00013048030086793005, 7.8049211879260838e-05, 0.00016776687698438764, 0.000184877950232476, 0.00010992131137754768, 0.0001319883594987914, 0.00020912809122819453, 0.0001818594173528254, 0.00019867246737703681, 0.00023785539087839425, 0.00021040761203039438, 0.00021273781021591276, 0.00010812513210112229, 0.00017349743575323373, 0.00015031754446681589, 0.00012425961904227734, 0.00023819973284844309, 0.0001138791922130622, 0.00016861988115124404, 0.00015347384032793343, 0.00012111456453567371, 0.0001393563870806247, 0.00016557883645873517, 0.00020157307153567672, 0.00018876022659242153, 0.00011655483103822917, 0.00019653522758744657, 0.00015901069855317473, 0.00011982797150267288, 0.00011646677739918232, 0.00016167943249456584, 0.00014692347031086683, 8.8639397290535271e-05, 0.00012150465045124292, 0.00015995975991245359, 0.00020407512784004211, 0.00020947192388121039, 0.00011756788444472477, 0.00014717208978254348, 0.00013983708049636334, 0.00013327255146577954, 0.00010399071470601484, 0.00011350741988280788, 0.00022409902885556221, 0.00014433992328122258, 0.00019218506349716336, 0.00016390312521252781, 0.00015512050595134497, 0.00014189403736963868, 0.00012996028817724437, 0.00014207694039214402, 0.00019111607980448753, 9.7511110652703792e-05, 0.00015142043412197381, 0.00020901474636048079, 6.7246954131405801e-05, 0.00015470798825845122, 0.00019905430963262916, 0.00017419668438378721, 6.4173967984970659e-05, 0.00012933122343383729, 0.00023872527526691556, 0.00014901123358868062, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -102,8,21,8,-80,-98,-20,-85,36,-77,43,-104,57,-127,79,-85, 
  /* [1][0][][] */ -82,58,-50,-45,-12,6,9,70,-74,-15,67,-44,67,127,7,-18, 
  /* [2][0][][] */ -3,-3,-57,13,-31,-9,-6,-22,-74,48,23,29,36,12,-8,127, 
  /* [3][0][][] */ -26,-80,41,-45,-81,21,-42,-96,15,6,24,-89,-50,-83,-127,5, 
  /* [4][0][][] */ 102,12,-34,18,-100,-33,-127,30,-39,42,17,102,21,44,-6,-37, 
  /* [5][0][][] */ -38,34,-77,-37,29,-28,-16,-82,-21,-48,-14,4,65,-73,-127,-8, 
  /* [6][0][][] */ 31,-58,-30,32,-127,67,72,-59,-5,-46,82,-39,31,-15,-121,-2, 
  /* [7][0][][] */ -56,127,127,-84,33,70,10,-56,-27,108,-65,-29,116,11,22,75, 
  /* [8][0][][] */ -49,16,42,18,40,9,127,87,-17,-54,-73,-97,2,62,-49,-34, 
  /* [9][0][][] */ 79,19,14,42,-127,-38,-63,-116,94,64,78,41,-37,-95,74,-36, 
  /* [10][0][][] */ -10,-114,44,-62,-127,68,29,-12,-47,-51,-24,58,6,20,-111,-12, 
  /* [11][0][][] */ 49,-47,21,99,-64,-22,38,-40,127,121,-91,2,29,-88,-4,36, 
  /* [12][0][][] */ -79,-33,127,-18,2,0,32,9,40,-38,55,26,20,-32,-44,27, 
  /* [13][0][][] */ -5,-53,15,31,21,0,127,18,-64,12,37,28,22,37,59,-64, 
  /* [14][0][][] */ 120,-51,127,10,35,95,107,12,26,68,11,-20,100,-57,17,-20, 
  /* [15][0][][] */ 35,127,1,-16,15,96,-50,16,-42,-15,-43,-4,-63,119,-27,-72, 
  /* [16][0][][] */ -52,84,117,-65,25,91,67,1,56,-19,-11,27,116,-33,127,107, 
  /* [17][0][][] */ 12,35,108,-127,47,-14,-24,-15,-27,90,-54,48,18,-71,36,-29, 
  /* [18][0][][] */ -13,43,-63,-66,40,72,-17,-84,-9,79,52,57,-15,127,8,-23, 
  /* [19][0][][] */ 35,96,79,60,127,-28,21,53,-17,117,8,100,64,112,-85,57, 
  /* [20][0][][] */ 46,49,-15,18,-42,19,-2,9,-6,-36,-127,-14,105,-29,45,-25, 
  /* [21][0][][] */ -84,-56,-58,127,-49,-3,-121,20,14,-63,15,26,-50,14,-44,-54, 
  /* [22][0][][] */ 10,23,-30,-72,126,4,-91,55,43,117,36,127,11,77,27,48, 
  /* [23][0][][] */ -53,-8,-49,20,26,34,71,59,9,127,-2,12,-52,31,-67,-36, 
  /* [24][0][][] */ 65,-30,23,-20,127,68,97,-56,-1,11,38,39,-66,11,33,-2, 
  /* [25][0][][] */ 92,-41,70,-9,1,-45,-5,86,127,-24,-45,-36,60,-51,77,51, 
  /* [26][0][][] */ 16,38,127,50,94,-22,-43,-9,-1,83,10,68,27,-51,53,-54, 
  /* [27][0][][] */ -46,78,-76,-21,-11,37,24,-40,14,-26,81,16,0,5,127,113, 
  /* [28][0][][] */ -70,20,-4,-67,54,-79,24,-48,-127,55,6,-6,39,64,-30,18, 
  /* [29][0][][] */ 58,127,-21,-21,42,94,-23,-9,18,18,3,53,-62,-7,-6,81, 
  /* [30][0][][] */ -55,49,-72,-44,33,-15,19,4,-56,33,-47,-27,-19,53,2,127, 
  /* [31][0][][] */ 38,-71,80,62,26,-69,-127,4,-20,35,-7,-6,-104,93,50,91, 
  /* [32][0][][] */ -15,42,41,55,-70,47,88,69,44,-127,2,-99,44,64,15,6, 
  /* [33][0][][] */ -82,32,22,84,-3,-7,-97,37,-53,-27,32,-19,-71,35,58,127, 
  /* [34][0][][] */ -54,-5,-68,-81,88,8,-37,121,40,-1,-36,-69,-113,-42,-73,127, 
  /* [35][0][][] */ 95,-10,57,0,-23,40,-76,-10,7,-127,-50,-11,15,-47,83,-20, 
  /* [36][0][][] */ 20,62,-111,-44,47,127,-32,26,-6,30,25,-1,-19,64,-59,4, 
  /* [37][0][][] */ 34,6,58,-61,40,-127,25,-54,-56,61,-58,-43,-24,12,45,8, 
  /* [38][0][][] */ -32,87,58,-60,24,2,104,-75,17,-9,-100,4,-32,-103,-127,43, 
  /* [39][0][][] */ 85,42,-84,-127,-38,-18,18,-87,-1,-28,2,-42,80,-43,-88,-13, 
  /* [40][0][][] */ -85,-29,-42,-89,-88,-35,32,-127,-2,24,-18,-22,92,87,-2,104, 
  /* [41][0][][] */ -49,-102,-11,88,18,-57,-104,4,18,-55,51,-57,-127,-98,18,39, 
  /* [42][0][][] */ -47,70,-79,-127,49,43,-40,-16,91,40,-57,-5,14,-2,-30,-7, 
  /* [43][0][][] */ -19,37,-21,6,127,5,44,36,15,4,16,-76,-105,-18,-35,6, 
  /* [44][0][][] */ 90,17,19,-2,-19,2,72,33,53,-127,32,-24,79,-6,-36,-56, 
  /* [45][0][][] */ 42,-80,-47,56,-52,-52,58,108,94,-64,-61,-41,-94,127,51,-102, 
  /* [46][0][][] */ -7,-33,51,93,-55,25,-127,-9,13,-90,40,-55,20,43,78,52, 
  /* [47][0][][] */ -60,-18,3,51,-7,4,93,28,-11,-74,-127,-70,36,-23,-81,39, 
  /* [48][0][][] */ -56,57,55,-22,9,62,-42,-106,-27,-35,38,-30,127,-105,-36,46, 
  /* [49][0][][] */ -33,-8,21,-11,-6,6,121,127,-13,-21,-17,22,-65,22,-42,23, 
  /* [50][0][][] */ 82,58,-76,27,33,-127,-11,-14,-57,40,-58,35,-17,-58,-69,-72, 
  /* [51][0][][] */ -56,13,-29,127,-27,35,-54,-56,-49,-81,29,-46,16,44,-31,54, 
  /* [52][0][][] */ -95,46,24,-29,-13,14,71,-43,14,-62,-42,9,-69,-16,-127,-39, 
  /* [53][0][][] */ -31,-69,-107,-127,-40,23,63,108,99,-107,-10,14,-36,-9,52,125, 
  /* [54][0][][] */ -25,-59,-18,44,-44,127,3,-64,-39,-124,93,52,-67,46,-95,25, 
  /* [55][0][][] */ 21,-33,-35,18,48,3,39,52,-35,-75,-127,-47,79,-43,-37,30, 
  /* [56][0][][] */ 127,-69,-73,-18,-74,2,-77,-1,4,-6,11,40,104,-38,-10,32, 
  /* [57][0][][] */ -19,-23,22,-2,88,93,13,-13,-39,-15,18,22,-37,11,-127,10, 
  /* [58][0][][] */ -3,27,-12,-23,33,2,-73,-40,51,-124,-57,-11,-127,-30,-49,90, 
  /* [59][0][][] */ -53,-55,-6,-6,15,35,-127,-42,-24,47,-77,60,-47,-24,-36,-32, 
  /* [60][0][][] */ -11,-70,-57,-6,-127,-96,61,2,27,60,-71,54,-42,-39,7,18, 
  /* [61][0][][] */ -3,37,-116,-37,-21,12,-127,-82,-32,-5,54,97,90,-59,99,42, 
  /* [62][0][][] */ 70,24,100,-11,-34,77,65,81,-95,127,26,73,75,77,87,125, 
  /* [63][0][][] */ 10,-113,-6,-16,-86,-14,20,-38,-43,-1,-18,-23,-38,127,117,38, 
  /* [64][0][][] */ 43,28,-102,-29,37,44,27,-20,-8,-127,17,17,89,-47,-11,124, 
  /* [65][0][][] */ -6,14,87,24,50,-14,61,67,-99,7,-127,-49,44,110,-48,7, 
  /* [66][0][][] */ -73,-105,11,-104,-45,-127,42,-16,2,-24,44,82,-93,-59,-30,66, 
  /* [67][0][][] */ -19,-58,-42,-31,-45,93,-11,-127,-60,-11,-33,-121,1,-21,-41,16, 
  /* [68][0][][] */ 127,25,-26,9,-34,34,-35,-54,-57,-48,-42,-5,12,3,52,-32, 
  /* [69][0][][] */ 61,-2,22,-24,-44,-4,-35,34,-18,127,-34,25,-2,43,55,-27, 
  /* [70][0][][] */ 57,16,-53,50,-108,28,11,-127,115,56,34,31,76,-104,9,67, 
  /* [71][0][][] */ 105,-127,86,56,-8,-45,0,11,106,-2,-11,126,30,-43,-24,17, 
  /* [72][0][][] */ -35,-28,2,80,48,3,-118,126,62,-12,63,-1,-35,-20,-69,127, 
  /* [73][0][][] */ 113,-8,80,-82,114,-99,-96,73,-34,109,-30,21,85,-127,-19,-73, 
  /* [74][0][][] */ 111,-27,33,66,-127,-25,106,-41,-48,-26,-16,-85,52,-67,-35,-54, 
  /* [75][0][][] */ 66,78,-43,36,62,28,-16,-6,8,-17,87,63,-116,81,51,127, 
  /* [76][0][][] */ -52,-29,5,-24,-55,8,66,8,-53,-9,127,38,-40,-106,-6,107, 
  /* [77][0][][] */ -81,97,-25,28,-54,-57,14,127,56,-95,-83,-8,-37,-4,5,111, 
  /* [78][0][][] */ 127,39,-31,26,-50,20,-102,-21,-1,1,-65,19,28,-73,0,63, 
  /* [79][0][][] */ -27,-17,46,-8,52,-125,-43,-43,-32,46,37,-65,-113,127,-56,29, 
  /* [80][0][][] */ 3,88,25,-127,-4,-1,104,-91,-41,0,-43,-6,73,-37,-15,-66, 
  /* [81][0][][] */ 11,-44,-24,-108,38,34,-16,101,127,27,-37,-56,-64,45,-112,-85, 
  /* [82][0][][] */ 59,25,63,0,127,-102,28,6,-7,85,18,-46,-42,-20,3,-55, 
  /* [83][0][][] */ 17,24,44,47,83,39,112,85,-33,68,16,-28,-72,127,-49,-94, 
  /* [84][0][][] */ 15,-127,-19,83,2,-69,-115,29,-56,48,-9,-32,-60,37,-38,-58, 
  /* [85][0][][] */ -79,62,-39,-61,-45,-60,-38,-98,-58,51,-39,-51,-120,-127,-67,23, 
  /* [86][0][][] */ -17,29,106,83,34,-29,17,-14,7,5,-30,-37,20,55,-127,-69, 
  /* [87][0][][] */ -2,46,127,-47,-109,-52,31,14,25,-11,22,43,-46,20,9,1, 
  /* [88][0][][] */ -24,-48,-79,23,43,-1,33,-73,-58,-37,-124,-127,77,-8,3,-6, 
  /* [89][0][][] */ 4,28,62,-127,5,-72,-26,70,110,9,39,-109,1,-1,63,-85, 
  /* [90][0][][] */ -20,61,31,17,-51,46,5,109,36,-41,-6,127,52,4,-17,50, 
  /* [91][0][][] */ 13,13,-9,47,34,44,-11,-84,-21,30,-21,-27,-38,-127,-36,-4, 
  /* [92][0][][] */ -55,112,-17,-21,-116,-6,-48,79,-28,40,127,57,3,17,55,34, 
  /* [93][0][][] */ 112,39,83,35,-127,-71,28,2,-17,-25,-47,-81,15,-37,-6,-35, 
  /* [94][0][][] */ -22,-127,17,-80,-14,3,-43,-10,64,-34,-13,37,25,8,-47,39, 
  /* [95][0][][] */ -49,-94,-17,-23,87,105,-127,35,65,30,-51,65,-28,78,-48,64, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0014299448812380433, 0.0022384212352335453, 0.0035623104777187109, 0.0021760149393230677, 0.0017305631190538406, 0.0017735406290739775, 0.0012594979489222169, 0.0027784984558820724, 0.0022792771924287081, 0.0016138486098498106, 0.0023880635853856802, 0.0011548064649105072, 0.0019044033251702785, 0.0028475073631852865, 0.0016940186033025384, 0.0022577850613743067, 0.0022873932030051947, 0.0017827711999416351, 0.0028242873959243298, 0.002379892161116004, 0.0026811934076249599, 0.0011150330537930131, 0.00063436722848564386, 0.0029078039806336164, 0.0024406732991337776, 0.0025112484581768513, 0.0013619548408314586, 0.0018610050901770592, 0.0025299310218542814, 0.0024753818288445473, 0.0012021118309348822, 0.0028659678064286709, 0.0017688595689833164, 0.0019216570071876049, 0.0011494747595861554, 0.0024707973934710026, 0.002722801873460412, 0.0016188732115551829, 0.001943867071531713, 0.003079947317019105, 0.0026783463545143604, 0.0029259615112096071, 0.0035030306316912174, 0.0030987916979938745, 0.0031331097707152367, 0.0015924198087304831, 0.0025551945436745882, 0.0022138112690299749, 0.0018300415249541402, 0.0035081019159406424, 0.001677163178101182, 0.0024833602365106344, 0.00226029590703547, 0.0017837225459516048, 0.0020523802377283573, 0.0024385729338973761, 0.0029686803463846445, 0.0027799783274531364, 0.001716568716801703, 0.0028944851364940405, 0.0023418401833623648, 0.0017647742060944438, 0.0017152719665318727, 0.0023811443243175745, 0.0021638248581439257, 0.001305442419834435, 0.0017894675256684422, 0.0023558177053928375, 0.0030055295210331678, 0.003085011150687933, 0.0017314886208623648, 0.0021674863528460264, 0.0020594596862792969, 0.0019627800211310387, 0.0015315299388021231, 0.0016716878162696958, 0.0033004328142851591, 0.0021257754415273666, 0.0028304178267717361, 0.0024138938169926405, 0.0022845473140478134, 0.0020897535141557455, 0.0019139985088258982, 0.0020924473647028208, 0.0028146742843091488, 0.0014361011562868953, 0.0022300542332231998, 0.0030782781541347504, 0.00099038379266858101, 0.0022784718312323093, 0.002931585069745779, 0.0025654928758740425, 0.00094512628857046366, 0.001904733944684267, 0.0035158419050276279, 0.0021945724729448557, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -25009, 9318, 6330, -9197, 6589, -14342, 20590, -14067, 8379, -8074, 11940, 5915, -983, -33096, 1689, 8672, };
const TfArray<16, float> quant14_scale = { 16, { 8.3844679465983063e-05, 3.4328269975958392e-05, 4.889650153927505e-05, 4.8565103497821838e-05, 6.9541143602691591e-05, 0.00013013223360758275, 6.6728389356285334e-05, 5.9367601352278143e-05, 0.00010247361205983907, 0.00010386854410171509, 9.319731907453388e-05, 5.5110318498918787e-05, 6.8416615249589086e-05, 7.8890603617765009e-05, 4.7098390496103093e-05, 6.3494939240626991e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 16,59,24,45,3,-105,-1,-7,-34,-70,17,18,43,-57,39,18,-70,-37,37,-11,75,0,-50,13,4,52,127,66,15,82,67,-59,15,-16,-11,-23,53,74,18,-34,84,32,-8,-27,-17,-33,43,-43,15,-24,64,-10,-48,7,22,35,9,-25,-4,23,-11,48,-61,-9,5,4,85,5,-22,-31,30,-4,6,23,3,8,33,-49,75,29,1,53,44,46,-25,15,-27,86,10,5,-85,-14,34,19,99,45, 
  /* [1][0][][] */ 18,29,-61,-21,-1,-111,110,-78,-10,-68,-112,-64,-22,-34,8,-72,-27,-61,-65,-15,16,-102,96,-7,1,16,-28,79,-70,-5,-39,31,-25,15,32,-17,-1,20,-75,82,41,29,42,-69,78,-19,-14,41,-107,-38,4,-127,-18,45,113,43,87,5,-48,-9,-50,-50,10,-31,25,63,55,-8,-88,-122,-41,61,18,54,-3,18,-33,-13,45,-77,-15,-21,59,-46,-18,-51,-19,14,-61,-25,46,64,69,-49,-47,80, 
  /* [2][0][][] */ -31,-1,2,-8,57,13,-20,18,-54,19,13,-33,3,-3,44,17,14,-41,-127,-34,-15,-51,15,36,14,-24,-44,1,-57,-10,3,35,-12,-55,-32,-3,-29,41,1,-24,31,25,24,64,19,66,37,-19,-70,-8,-11,35,-14,42,21,-35,39,-34,28,26,-50,-18,-11,44,28,-4,-39,3,-16,-15,-6,-4,21,32,39,54,-59,-27,-33,-24,1,32,28,-17,-13,-25,-10,-46,-31,-25,10,68,26,-2,47,-58, 
  /* [3][0][][] */ 59,-44,-9,-92,-2,-50,106,-41,5,126,-93,-15,5,-36,-2,93,54,4,32,33,-64,51,-17,31,-53,105,75,-25,14,4,-67,35,-14,-4,47,1,-25,-47,-52,69,16,-4,-64,3,37,-69,-24,40,62,-39,64,-99,78,41,-5,-12,-20,-8,-19,-29,-24,7,22,-11,-31,-51,127,-37,-32,-8,-40,-3,14,-80,14,-6,7,-49,121,20,13,-64,7,-63,5,-54,87,58,-14,26,-73,-39,7,-84,-5,41, 
  /* [4][0][][] */ -6,91,55,12,-39,42,-34,-21,41,-52,-1,14,4,33,-32,38,10,-53,-63,-68,42,-30,-100,10,-48,-36,-60,43,-55,127,-97,0,1,-35,8,-70,116,51,12,25,32,27,70,-18,-40,41,38,-29,49,-30,-68,3,-109,-24,64,24,15,52,-14,48,-55,-100,-15,-4,86,49,-71,9,-1,-20,-17,-67,4,82,62,47,-38,38,-93,39,34,77,46,-44,39,-70,-4,-103,-57,-53,17,-8,-9,30,51,-20, 
  /* [5][0][][] */ -7,-28,34,6,-13,-14,-28,25,37,-12,-12,-32,-30,-34,36,-18,-14,-7,-56,-49,-10,4,-24,29,21,-41,63,-14,20,21,-9,71,0,-56,42,14,-51,-11,-20,0,-39,-13,-26,25,7,9,-36,16,-1,21,48,-47,14,-80,-3,30,-44,-63,-12,-41,9,35,17,56,-28,7,122,4,-12,-41,10,6,4,30,47,9,-5,-1,127,42,-15,-15,-16,7,34,67,7,87,6,-15,-17,-2,16,11,-31,28, 
  /* [6][0][][] */ 1,-42,36,-11,-11,127,-13,-86,10,-10,-65,24,-13,-22,-33,84,16,12,-4,-22,-85,13,-30,-45,19,-52,-23,40,-93,73,3,-23,3,34,-19,-15,21,-45,26,-7,-18,38,31,-19,11,39,-94,-29,16,19,-59,-74,44,22,-11,-10,44,-15,37,-22,14,-25,46,-8,30,-37,-86,-78,-61,6,-18,-49,-4,-69,31,-101,83,-2,-89,32,-32,60,-1,-60,29,2,17,-14,-87,75,-28,83,23,-16,24,-95, 
  /* [7][0][][] */ -49,14,-58,47,-26,15,48,-67,-110,22,91,87,-8,-61,-38,-12,-15,16,-29,13,-77,-14,-1,-60,76,31,-5,35,-47,51,53,4,-35,-127,0,93,-3,42,-29,30,-9,-8,-6,-51,3,50,44,69,-13,37,-25,27,19,-32,18,-36,-20,25,-45,16,45,20,-27,-22,71,-48,120,-16,-14,-25,92,-5,16,-2,-65,-41,28,-51,92,0,30,-1,-41,17,44,33,-62,50,9,-3,35,15,64,-37,34,-60, 
  /* [8][0][][] */ 14,-58,6,30,-34,7,3,-26,-25,26,54,75,16,48,-45,-16,70,-17,11,11,3,-86,-52,-23,-26,-18,36,4,-4,33,0,-42,-42,32,-3,24,-52,-34,52,-20,12,52,26,-68,16,-9,10,12,50,-7,43,-5,2,-5,-73,-5,-60,127,-73,18,-14,-70,-75,1,-73,-47,-13,14,23,27,48,-49,-12,-124,18,-84,15,40,-30,21,-7,-2,23,72,64,-60,-58,42,-28,97,-6,-54,-58,-17,9,-98, 
  /* [9][0][][] */ -4,-31,-15,31,18,-1,13,25,-9,9,43,35,-18,26,25,-53,-10,15,-23,-25,6,52,-12,12,-16,21,-14,21,30,-15,3,-1,-13,-11,22,38,-3,-22,48,-7,-6,-7,26,-1,18,78,-5,36,-35,7,-26,17,127,-7,11,-18,2,-15,43,3,-14,-5,85,2,16,34,31,-5,40,8,-27,42,-2,-117,-24,-115,-30,2,1,2,-17,15,12,-15,44,12,-46,-19,-28,110,40,30,25,30,2,9, 
  /* [10][0][][] */ 22,42,7,-32,-43,26,-31,-22,75,3,-18,46,34,9,-16,-35,-39,2,26,18,31,8,-8,-47,12,-18,-106,44,-42,79,53,16,42,6,-27,26,7,15,-33,0,71,0,63,-53,-31,-31,29,44,7,23,23,-4,-4,13,-24,26,-24,39,13,7,2,-37,5,12,-3,-14,-127,-51,-27,-25,58,-31,-21,49,39,20,68,-24,-111,46,2,44,10,27,0,16,-51,-121,-28,14,21,2,51,-51,1,35, 
  /* [11][0][][] */ 28,-15,2,-13,-54,52,47,-15,84,-22,-3,-33,46,26,-22,-9,-38,84,39,-55,18,67,42,-52,49,11,78,28,21,-39,-1,39,19,88,-102,-30,30,26,76,2,-64,41,-40,40,-30,-26,-2,-7,53,8,-17,29,-31,23,-65,104,-26,33,7,-44,55,58,2,-113,-14,-65,-117,-101,16,-52,-82,23,69,50,4,-14,48,44,-127,4,59,24,-38,40,-19,1,73,84,-1,-71,13,-43,-56,16,98,41, 
  /* [12][0][][] */ 9,42,-30,-53,55,-91,53,51,68,-70,5,-48,-10,-33,1,30,15,-32,-28,-3,1,66,30,79,-40,-49,-127,2,58,-15,30,-5,-4,-118,92,-41,49,24,-28,15,-34,-87,10,64,61,2,67,-52,-79,-14,-61,114,71,-11,84,-99,52,7,-41,-53,24,78,87,-4,-25,-31,27,29,89,-8,26,68,-2,-30,24,-14,-50,-98,31,-56,11,-48,4,-60,11,3,17,-103,-22,11,-35,73,30,96,5,53, 
  /* [13][0][][] */ -46,25,-62,-13,9,53,-16,-36,40,96,-49,74,-55,-63,44,-35,10,85,24,57,-74,-38,11,-11,34,20,-15,18,-17,30,75,-16,18,83,-1,91,40,-60,-103,-33,33,-36,-11,28,34,64,-55,57,-58,45,9,17,-10,-19,50,62,23,-67,-7,-11,15,31,-15,3,20,120,123,47,33,39,-64,20,49,79,-96,62,40,-65,127,-58,-11,-38,36,46,-1,66,-36,-9,-18,-35,37,81,32,-10,16,6, 
  /* [14][0][][] */ -10,72,27,47,-47,-111,46,28,-78,-37,42,34,-83,25,85,-54,-44,-2,-67,33,2,-11,-112,20,-56,16,-64,-98,-29,-24,71,65,-63,22,19,-1,-17,-45,20,-41,10,-28,27,-50,5,83,-35,46,-8,-62,75,15,11,1,-12,7,-43,10,-5,52,12,27,-5,45,28,-56,-1,-57,14,84,78,47,-51,17,21,5,0,-10,30,16,-73,127,35,-100,112,-16,-30,-4,-122,13,-35,3,-24,11,44,14, 
  /* [15][0][][] */ 46,-22,8,38,66,6,-8,26,1,5,-31,-36,39,25,-8,-23,6,41,-73,22,-22,-34,26,33,71,-37,100,15,28,-37,-48,66,56,18,-17,-100,57,98,71,42,47,25,-13,27,-41,-127,68,-62,-33,-9,-6,32,-37,-37,-26,11,0,-13,0,-23,11,-21,-48,45,33,60,-35,33,-34,-54,15,-31,5,-123,-32,-99,-34,-18,-104,53,79,-34,22,14,-61,-1,-9,-33,63,52,10,-68,-4,-13,25,-37, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0035633987281471491, 0.0014589513884857297, 0.0020781012717634439, 0.0020640168804675341, 0.002955498406663537, 0.005530619528144598, 0.0028359564021229744, 0.0025231230538338423, 0.004355128388851881, 0.0044144131243228912, 0.003960886038839817, 0.002342188498005271, 0.0029077059589326382, 0.0033528504427522421, 0.0020016815979033709, 0.0026985348667949438, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 13555, -2340, -7009, 1779, -2235, 2295, 3808, -4381, 3077, -3072, -3791, -2784, 3532, -6848, -4377, -5321, -2304, -1951, -3836, 2088, -5188, -1824, -9188, -997, -68, 8251, -16099, -11361, -285, -2490, -6287, -3948, 15430, 2070, -1440, 1407, 456, 11443, -2948, 9430, -4630, -5286, -5860, 1881, 1026, 3227, 11886, 403, -1713, -69, -6443, -2681, -4594, -1534, -1642, -139, 7489, 9154, 1456, 5478, 4818, -6099, -1335, 13261, 11883, 437, 13795, 21072, -1293, -2226, 10126, 2454, 27, 522, -3718, 2914, 21307, 11031, 7506, 2758, 10160, -2010, 8940, 10233, 3920, -2952, 16741, -5809, 15003, 3605, -11223, 2280, -1881, 7945, 21325, -570, };
const TfArray<96, float> quant16_scale = { 96, { 8.6299747636076063e-05, 0.00023875567421782762, 0.00012646590766962618, 0.00024048627528827637, 0.00015721168892923743, 0.00059221545234322548, 0.00010011818812927231, 0.00014846202975604683, 0.00025163282407447696, 0.00017940446559805423, 0.00020644839969463646, 0.00015473300300072879, 0.00010893515718635172, 9.4995390099938959e-05, 0.00016308385238517076, 0.00017610024951864034, 0.00020732459961436689, 0.00021978620497975498, 0.00020804774248972535, 0.00024213040887843817, 0.00016978582425508648, 0.0002216799184679985, 0.0001084909526980482, 0.00019480619812384248, 0.0023536200169473886, 0.00012752617476508021, 0.00010948102863039821, 6.8407432991079986e-05, 0.00027664389926940203, 0.00017142601427622139, 0.00013846505316905677, 0.00019244273426011205, 7.8563549323007464e-05, 0.00046672637108713388, 0.00017565878806635737, 0.0002034031058428809, 0.0003100429312326014, 0.00013790153025183827, 0.00016706291353330016, 8.4111881733406335e-05, 0.00044394010910764337, 0.00016902979405131191, 0.0001779351441655308, 0.00024657597532495856, 0.00019428969244472682, 0.00029713087133131921, 0.00014268730592448264, 0.0003880819131154567, 0.00015573501877952367, 0.00030731238075532019, 0.000176020766957663, 0.00018539729353506118, 0.00013981762458570302, 0.00050604529678821564, 0.00033857044763863087, 0.0002613087126519531, 0.00015947582141961902, 0.00029264204204082489, 0.00032078838557936251, 0.0001921991934068501, 0.00015253228775691241, 0.00019005080685019493, 0.00012905264156870544, 9.837592369876802e-05, 0.00016647753363940865, 0.00031198427313938737, 0.00012033498933305964, 9.6021802164614201e-05, 0.00015187049575615674, 0.00031443533953279257, 7.9520352301187813e-05, 0.00021350261522457004, 0.0005223719053901732, 0.00018496229313313961, 0.00011707049270626158, 0.00019275261729490012, 6.6562526626512408e-05, 0.00018236244795843959, 0.00014121252752374858, 0.00014868368452880532, 8.6394611571449786e-05, 0.00017775260494090617, 7.772735261823982e-05, 0.00026151593192480505, 4.438546602614224e-05, 0.00020118053362239152, 9.1587375209201127e-05, 0.00021928042406216264, 0.00010115926852449775, 0.00018926495977211744, 8.0877543950919062e-05, 0.00019062716455664486, 0.00032361171906813979, 0.00013306930486578494, 7.3840521508827806e-05, 0.00034822299494408071, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -74,-11,24,-28,101,-23,39,-8,11,-45,7,-16,-43,22,21,-68,9,28,-41,-12,21,46,74,57,3,2,-37,30,31,10,54,24,-52,-14,-16,-21,-3,-29,-26,-11,10,30,54,-9,-19,14,-113,-8,-1,-3,4,64,-72,-20,48,0,-31,-24,0,-17,-44,-10,-4,-13,-11,-8,-45,26,-14,30,8,-5,39,-1,-28,-11,-19,-18,127,-50,-127,29,-14,-10,-25,-1,11,31,-110,-10,102,-74,11,0,-28,-19, -37,76,30,-98,-21,-11,127,-27,8,-61,-31,8,-72,18,-125,124,13,107,8,-45,-29,127,109,120,41,20,121,99,127,33,127,7,-102,-41,-107,-18,-2,12,127,-53,-9,-127,26,-8,60,-68,-49,10,88,2,26,127,-67,3,-71,2,-103,-2,-11,26,-33,-120,-127,-127,-55,-1,-13,-51,-12,24,-86,104,-127,-7,-16,-57,-127,17,8,-127,-61,36,23,-15,79,72,-97,44,-127,-21,19,-71,40,70,-71,-67, -32,3,-25,33,62,-9,96,13,-24,33,0,39,13,19,-7,-80,14,12,-30,-37,-9,13,88,40,24,3,127,-16,-3,4,48,24,5,-23,0,90,6,-100,-29,64,9,116,55,-1,2,-63,-17,-15,65,-12,7,42,46,-33,22,-3,35,-11,16,-28,-33,18,-50,-15,-27,-26,127,-62,-1,13,5,-12,31,10,-41,-1,-48,-31,-36,-26,-121,34,-127,19,0,-9,7,-62,-36,-63,109,36,9,-1,-56,-7, 
  /* [0][1][][] */ -127,-18,86,12,65,99,-45,1,-5,-76,-7,-47,-75,63,84,60,-4,25,31,12,61,-5,44,-32,56,-20,84,56,-9,26,30,-4,-127,-14,73,-5,7,-127,-33,-127,-1,120,127,-19,-62,127,-66,-89,103,62,29,-39,-90,9,50,-5,32,-61,25,-45,-22,2,94,-66,-22,26,-29,-90,-36,-9,-117,-29,52,122,8,-96,-117,-127,-63,45,-88,2,-15,-72,54,40,-97,50,-117,127,127,-127,127,-27,-77,-9, 20,127,127,127,-127,-127,101,-51,127,127,-53,-98,-32,127,-31,127,127,-127,127,127,127,-81,88,-127,-127,-127,114,127,-106,127,-8,127,-31,127,127,-94,127,89,22,-94,127,104,-112,-87,127,-19,127,127,6,-127,127,-104,117,127,-127,127,-102,127,-127,127,-127,127,114,-78,113,127,-7,88,-114,-127,30,-127,-19,127,127,74,64,-124,108,-61,-5,127,42,127,127,54,-98,127,-105,24,-69,-52,-74,-34,-127,-15, -118,-30,55,1,-8,74,-58,5,-39,-73,21,127,-127,21,42,36,-18,76,27,-9,52,-14,64,-33,61,2,58,22,-19,3,51,-3,-121,-31,87,127,-8,-125,-59,-49,-10,-24,68,-39,-57,-66,-38,-91,90,66,21,-44,127,-9,76,-22,58,-45,39,-42,-5,-29,-125,-78,-86,-5,-50,-127,-24,21,-127,-23,31,-101,5,127,-63,-77,-56,47,-124,-2,-104,-75,30,45,-127,8,-86,-93,123,125,-32,-38,-91,-3, 
  /* [0][2][][] */ -32,-37,-34,13,81,-18,-64,67,-12,40,46,-7,74,41,3,-19,4,-32,-74,-24,25,-26,52,4,-25,-4,-8,46,-7,-21,7,27,53,-5,-4,-82,-42,-52,30,18,-18,-50,24,38,-13,8,-113,-9,-127,-1,-4,5,45,-38,46,-11,-16,-57,8,-34,-40,51,16,-27,-26,-38,105,-3,41,46,-35,-45,-29,4,51,-38,-52,43,-35,28,41,-5,-70,-70,64,7,-23,-39,69,5,-14,3,-20,-80,-69,9, -32,-32,4,-59,-8,-2,6,127,-70,106,127,-30,18,44,127,74,-5,-40,98,-76,6,-21,127,5,24,2,26,48,-8,-26,-38,-28,-26,-31,-82,-39,-96,-73,114,-64,-7,5,-46,127,-14,-28,-60,4,-77,-14,9,8,60,21,-42,-29,-127,-68,33,-75,107,58,126,-71,-127,-78,-40,-121,127,36,-52,-7,8,-15,52,-34,-94,15,-9,90,23,-12,-113,-67,109,-127,-73,24,-48,-5,-16,18,2,-127,-39,127, -6,11,-16,15,53,-19,-12,56,-32,17,37,72,75,16,11,-89,-5,-16,-18,-74,-11,-1,-8,9,-19,16,-80,47,-17,-28,29,2,-8,-1,-3,-24,-32,-31,47,-13,-10,93,43,12,-17,-2,-61,13,-82,2,1,9,-15,5,19,10,-15,-23,-2,-72,-18,63,11,-101,-65,-35,-37,-33,13,44,-107,-32,-63,-56,14,-14,-68,17,105,51,52,2,-90,-20,63,-14,-64,18,-38,-18,-57,58,0,-62,29,-23, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.003886193735525012, 0.010751489549875259, 0.005694929976016283, 0.010829420760273933, 0.0070794541388750076, 0.026668258011341095, 0.0045084566809237003, 0.0066854450851678848, 0.011331364512443542, 0.0080788247287273407, 0.0092966491356492043, 0.0069678351283073425, 0.0049054967239499092, 0.0042777704074978828, 0.0073438854888081551, 0.0079300310462713242, 0.0093361055478453636, 0.0098972683772444725, 0.0093686701729893684, 0.01090345811098814, 0.0076456842944025993, 0.0099825449287891388, 0.004885493777692318, 0.0087723853066563606, 0.10598667711019516, 0.0057426756247878075, 0.0049300780519843102, 0.0030804786365479231, 0.012457647360861301, 0.0077195442281663418, 0.0062352675013244152, 0.008665955625474453, 0.0035378225147724152, 0.021017316728830338, 0.0079101519659161568, 0.0091595156118273735, 0.013961650431156158, 0.0062098917551338673, 0.0075230677612125874, 0.0037876712158322334, 0.019991220906376839, 0.0076116393320262432, 0.008012658916413784, 0.011103647761046886, 0.0087491264566779137, 0.01338020246475935, 0.0064254011958837509, 0.017475850880146027, 0.0070129577070474625, 0.013838690705597401, 0.0079264519736170769, 0.0083486894145607948, 0.0062961759977042675, 0.022787900641560555, 0.015246282331645489, 0.011767082847654819, 0.0071814106777310371, 0.013178064487874508, 0.01444553304463625, 0.0086549883708357811, 0.0068687344901263714, 0.0085582435131072998, 0.0058114142157137394, 0.0044300002045929432, 0.0074967071413993835, 0.014049071818590164, 0.005418846383690834, 0.0043239910155534744, 0.0068389326333999634, 0.014159446582198143, 0.0035809085238724947, 0.0096143102273344994, 0.023523109033703804, 0.0083291009068489075, 0.0052718417719006538, 0.0086799096316099167, 0.0029974000062793493, 0.0082120262086391449, 0.0063589904457330704, 0.0066954265348613262, 0.0038904657121747732, 0.0080044390633702278, 0.0035001672804355621, 0.011776414699852467, 0.001998737221583724, 0.0090594301000237465, 0.0041243028827011585, 0.009874492883682251, 0.0045553380623459816, 0.0085228560492396355, 0.0036420247051864862, 0.008584197610616684, 0.014572671614587307, 0.0059922900982201099, 0.0033251380082219839, 0.015680950134992599, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1489, 7716, 974, 3566, 2264, 9861, 550, 1511, 10486, -259, 10256, 2897, 877, 757, 8409, 676, 4103, 2433, -752, 8961, 912, 5589, -1357, 1901, -11656, 979, 2602, 1788, 9084, 927, 2110, 4514, 1548, 10079, 5271, 3985, 4006, 3388, 2487, 1834, 10662, 1576, 1790, 705, 5041, 5759, 5824, 8283, 2225, -1415, 1547, 3321, 2948, -4964, 5288, 191, 2951, 15441, 973, 1346, 3571, 9400, 3207, -575, 21104, 9900, 2595, 5509, 4678, 2958, 2120, 2323, -3886, 4353, 2878, 2668, 1184, 14200, 5859, 4197, 1946, 1526, 2189, 34668, -309, 5197, 4796, 1910, -1004, 2184, 2884, 5489, 3119, 2576, 2694, 5272, };
const TfArray<96, float> quant18_scale = { 96, { 0.000189911515917629, 9.1548754426185042e-05, 0.0002052119089057669, 0.00014787921099923551, 0.00021863215079065412, 8.4110652096569538e-05, 0.00022422254551202059, 0.00017784995725378394, 7.1892471169121563e-05, 0.00025155182811431587, 8.0534256994724274e-05, 0.00018027148325927556, 0.00021693382586818188, 0.00025814786204136908, 8.317028550663963e-05, 0.00011654729314614087, 0.00014728486712556332, 0.00022673726198263466, 0.00017681113968137652, 9.1908936155959964e-05, 0.0001431768323527649, 0.00012974182027392089, 0.00017408626445103437, 0.00016992478049360216, 6.7837921960745007e-05, 0.00021630123956128955, 0.00016686708841007203, 0.00019252773199696094, 9.8230382718611509e-05, 0.00018615109729580581, 0.00018838237156160176, 0.00013609940651804209, 0.00024246920656878501, 9.135995787801221e-05, 0.00012719635560642928, 0.0001550157176097855, 0.0001558425574330613, 0.00017493376799393445, 0.00017371325520798564, 0.00018558507144916803, 8.3634906332008541e-05, 0.00016311592480633408, 0.00021825336443725973, 0.00017472640320193022, 9.7254960564896464e-05, 0.00013342010788619518, 0.00013863634376320988, 0.00010432689305162057, 0.0001783407642506063, 0.00020104553550481796, 0.00023933991906233132, 0.00019998749485239387, 0.00014905240095686167, 9.639893687563017e-05, 0.0001260117714991793, 0.00029301788890734315, 0.00013657491945195943, 6.6136672103311867e-05, 0.00017854846373666078, 0.00014439401275012642, 0.00014121222193352878, 7.977726636454463e-05, 0.00015179358888417482, 0.00018196721794083714, 4.2394920455990359e-05, 8.6109997937455773e-05, 0.00017791650316212326, 0.00013984745601192117, 0.00017002677486743778, 0.00013484383816830814, 0.00021642212232109159, 0.00014594331150874496, 0.00016329577192664146, 0.00014617221313528717, 0.000159708913997747, 0.00020801689242944121, 0.00018307116988580674, 6.7559834860730916e-05, 0.00012018153938697651, 0.00018459628336131573, 0.00015773506311234087, 0.00013142944953870028, 0.00020353509171400219, 3.1544648663839325e-05, 0.00021892332006245852, 0.00013406270591076463, 0.00013657729141414165, 0.00020605663303285837, 0.0001414520520484075, 0.00022887095110490918, 0.00014076127263251692, 0.00012554085697047412, 0.0001428272807970643, 0.00018892200023401529, 0.00018589444516692311, 0.00012691931624431163, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 16,-7,45,40,-83,-28,99,101,49,127,-25,50,3,12,37,97, 
  /* [1][0][][] */ -72,41,-100,-31,124,109,23,4,-28,-23,-80,34,-91,127,-58,-37, 
  /* [2][0][][] */ -32,60,93,-12,70,107,5,13,60,-2,18,-20,68,-127,-8,-12, 
  /* [3][0][][] */ 127,-43,68,16,40,41,23,1,36,36,-81,-22,0,49,-37,22, 
  /* [4][0][][] */ -92,-24,22,7,-48,-17,-101,-57,-80,76,-20,-55,-4,15,6,127, 
  /* [5][0][][] */ -127,16,38,-23,120,-5,6,-20,-62,22,-11,-5,-45,105,-60,5, 
  /* [6][0][][] */ -127,23,-26,23,-10,-30,48,43,34,-35,-19,47,1,18,-36,15, 
  /* [7][0][][] */ 8,53,85,-47,48,76,127,-22,36,-32,-42,4,104,-30,-19,-16, 
  /* [8][0][][] */ -51,-49,-72,123,-29,100,-95,-48,96,-25,127,46,68,13,-114,-12, 
  /* [9][0][][] */ 6,-120,-3,127,-66,-68,-48,1,65,33,9,68,-50,-30,-2,-33, 
  /* [10][0][][] */ -85,-32,-103,48,-91,92,11,-44,-2,-45,61,22,-41,127,-24,85, 
  /* [11][0][][] */ -82,-62,-15,-52,17,97,127,6,93,11,-12,-47,-61,107,-127,53, 
  /* [12][0][][] */ -65,-88,-107,57,-111,-127,-6,83,11,48,-32,124,-41,-34,9,55, 
  /* [13][0][][] */ -84,-12,-29,-16,-36,-5,51,19,-47,127,-25,-41,23,25,32,-3, 
  /* [14][0][][] */ -51,-95,39,-28,-21,24,-15,-95,83,-69,39,25,127,-100,-68,-109, 
  /* [15][0][][] */ 35,-127,112,-55,-49,-31,8,32,45,-32,-96,-30,96,-50,-7,-84, 
  /* [16][0][][] */ 28,-41,19,-43,10,37,-38,-39,63,-127,0,-20,8,-47,-108,-96, 
  /* [17][0][][] */ -9,8,9,-62,6,7,-18,18,127,-61,31,50,52,-49,-38,-81, 
  /* [18][0][][] */ 37,35,-36,-114,1,-64,127,-23,-22,66,-36,15,-34,64,-8,-42, 
  /* [19][0][][] */ -36,-32,-35,-127,-71,16,-26,-44,-14,-19,-50,-122,31,-43,-54,-50, 
  /* [20][0][][] */ -23,64,80,-111,117,-13,-44,109,-109,-127,3,-105,-48,121,-44,4, 
  /* [21][0][][] */ 12,-101,-94,43,68,61,77,79,-54,-127,-28,39,112,-122,-99,35, 
  /* [22][0][][] */ 51,-8,105,-7,12,6,50,-8,27,127,24,-7,-17,-51,79,-21, 
  /* [23][0][][] */ -127,-46,-25,35,110,22,-8,-51,-54,71,-22,-102,-23,48,25,72, 
  /* [24][0][][] */ 31,-54,89,64,39,-41,27,-59,66,117,-127,83,-19,-92,89,-127, 
  /* [25][0][][] */ 115,-42,92,127,-2,-37,-7,33,-90,54,84,-110,-46,33,98,25, 
  /* [26][0][][] */ -40,30,-9,69,-47,113,-32,46,-83,-28,-81,28,-20,53,30,-127, 
  /* [27][0][][] */ 40,1,-24,-40,-31,19,-39,28,-89,-41,-67,-23,-72,43,-7,127, 
  /* [28][0][][] */ -116,13,27,-29,74,1,-127,13,-29,-31,-27,-34,12,-61,-114,-30, 
  /* [29][0][][] */ -12,-127,3,74,-17,4,121,16,62,79,-120,55,19,-40,-52,53, 
  /* [30][0][][] */ 35,-30,-38,48,-127,11,41,9,85,-32,27,-43,-3,53,45,107, 
  /* [31][0][][] */ -127,19,11,121,-59,-4,-67,-6,4,-46,55,-36,-53,-49,-6,106, 
  /* [32][0][][] */ -127,-27,-46,-34,-50,-43,6,8,94,63,-30,-40,21,46,26,13, 
  /* [33][0][][] */ -11,20,-40,30,-79,-75,48,-8,-127,14,-57,-40,-1,38,42,59, 
  /* [34][0][][] */ 83,45,20,38,-114,-11,22,-1,46,-127,4,47,20,-4,28,48, 
  /* [35][0][][] */ 27,21,-55,-46,-127,27,52,-57,-19,32,-85,-36,5,45,27,68, 
  /* [36][0][][] */ -26,-9,-31,76,127,11,23,46,-24,28,-50,-86,-32,-3,-19,-8, 
  /* [37][0][][] */ -116,16,-5,-78,53,-66,-39,8,12,-21,-28,27,33,-61,-16,-127, 
  /* [38][0][][] */ 37,80,20,-72,-114,-7,-43,-127,-43,-96,-43,28,-7,-71,71,-32, 
  /* [39][0][][] */ -8,-89,-13,88,40,74,77,-35,24,40,96,-2,-9,127,30,125, 
  /* [40][0][][] */ 52,28,127,123,2,-99,-41,33,-41,101,-37,-24,-63,-11,52,-36, 
  /* [41][0][][] */ -29,22,13,10,-70,100,24,46,-51,57,-127,25,35,34,22,-125, 
  /* [42][0][][] */ 30,-51,46,-25,57,-1,60,-16,8,-80,-127,-14,3,-61,47,29, 
  /* [43][0][][] */ -43,-24,-64,-11,77,-47,-28,72,-108,-27,-127,-118,34,9,-33,53, 
  /* [44][0][][] */ -60,-67,-67,-125,96,77,71,58,-31,-95,-79,114,-60,127,1,84, 
  /* [45][0][][] */ 2,-56,-40,21,-127,110,-40,-32,52,-63,-10,-45,-2,44,-37,41, 
  /* [46][0][][] */ -15,-35,-23,-38,84,-69,-22,47,-19,15,-24,20,-60,-38,19,-127, 
  /* [47][0][][] */ -64,10,5,65,-47,-19,47,31,-11,65,102,48,-29,13,20,127, 
  /* [48][0][][] */ 38,1,-104,-117,23,-82,13,37,16,-90,-15,1,-76,-7,-55,-127, 
  /* [49][0][][] */ 15,15,26,7,4,-50,54,61,-67,127,-36,-2,-49,9,33,75, 
  /* [50][0][][] */ -14,10,14,12,-127,-20,-24,-52,88,27,15,58,-33,-54,25,22, 
  /* [51][0][][] */ 15,-11,18,-61,-44,127,25,4,55,-16,39,-12,100,58,13,28, 
  /* [52][0][][] */ 43,-37,-8,-75,100,-127,-15,-12,70,9,126,-53,23,26,-19,78, 
  /* [53][0][][] */ -57,-65,69,-25,-24,-96,82,-127,23,80,-119,41,-43,-39,-6,-104, 
  /* [54][0][][] */ 84,-9,54,21,-127,-46,-73,-100,6,15,27,20,-12,-61,-4,-13, 
  /* [55][0][][] */ 25,23,-21,57,-50,8,39,-25,-13,127,18,45,15,-27,17,32, 
  /* [56][0][][] */ -5,-107,-93,100,-49,36,-86,32,119,8,35,2,-26,-48,127,103, 
  /* [57][0][][] */ 23,-12,127,-38,98,-35,-41,-2,10,3,-45,58,73,-58,53,-4, 
  /* [58][0][][] */ 23,26,21,-126,56,-36,-16,127,14,127,-10,19,14,-7,64,42, 
  /* [59][0][][] */ -69,54,-4,-22,-12,-63,-21,13,-33,-4,-86,-67,-127,-17,65,40, 
  /* [60][0][][] */ 82,5,6,-10,-21,-32,45,-85,-12,127,-29,55,-21,-39,13,-9, 
  /* [61][0][][] */ 8,99,-20,-74,-54,-103,-56,-105,-65,14,-9,34,-103,-48,127,89, 
  /* [62][0][][] */ -35,92,-59,29,-14,120,-84,13,-67,47,-55,2,-93,25,33,-127, 
  /* [63][0][][] */ 5,-5,-91,-127,9,-51,71,4,12,-81,-49,-22,-87,43,31,-47, 
  /* [64][0][][] */ -95,-9,-18,8,80,-61,-25,127,-100,-17,-13,1,-52,115,55,71, 
  /* [65][0][][] */ -26,-92,-15,4,91,15,-77,-70,-127,-57,-27,-9,-107,97,-58,8, 
  /* [66][0][][] */ -34,63,-3,45,-32,127,-48,44,-59,37,-21,58,-22,64,63,-57, 
  /* [67][0][][] */ 19,-15,-47,-47,18,-94,77,-72,8,27,-69,127,-81,30,31,-112, 
  /* [68][0][][] */ -7,-127,6,91,7,-53,13,87,-22,65,24,0,-65,42,3,8, 
  /* [69][0][][] */ 25,-4,66,-49,77,-12,-42,69,105,96,105,96,86,-53,24,-127, 
  /* [70][0][][] */ 46,23,21,-20,63,12,-85,-46,-127,-87,-24,44,-22,56,-82,-27, 
  /* [71][0][][] */ -27,-75,39,-38,40,-20,1,-13,-127,81,-125,-69,-6,90,-19,39, 
  /* [72][0][][] */ 31,39,53,1,-30,-48,-82,-44,-22,71,-40,98,54,127,-87,3, 
  /* [73][0][][] */ 9,-40,-15,-47,33,-97,61,-25,60,75,114,7,53,-16,-52,127, 
  /* [74][0][][] */ -6,38,-27,46,-96,10,127,14,77,53,31,80,107,36,-74,9, 
  /* [75][0][][] */ -11,35,0,28,-58,127,-15,9,-37,25,-50,49,14,36,29,-65, 
  /* [76][0][][] */ -43,100,-12,36,-127,11,-25,-45,41,46,-16,-31,72,-76,-96,49, 
  /* [77][0][][] */ 101,127,-95,115,95,101,97,-42,59,12,94,3,101,52,32,-29, 
  /* [78][0][][] */ -4,-46,-6,-28,75,-111,27,-22,30,31,127,-24,-3,26,-30,114, 
  /* [79][0][][] */ -22,81,5,3,7,-19,12,-26,-121,-4,38,19,127,58,-70,-45, 
  /* [80][0][][] */ -127,28,53,-64,107,28,-39,-94,-94,121,-55,-54,-63,-62,-3,66, 
  /* [81][0][][] */ 41,56,-41,1,30,-4,74,122,-77,57,-54,-54,-56,5,91,127, 
  /* [82][0][][] */ 9,79,-51,-69,-32,-6,127,-30,40,-4,-25,42,64,-16,43,-53, 
  /* [83][0][][] */ 18,-54,33,3,44,6,-52,-113,7,10,42,3,45,-43,-77,-127, 
  /* [84][0][][] */ -127,-69,-71,-48,3,74,60,17,56,51,78,63,24,60,-75,-17, 
  /* [85][0][][] */ 79,-2,70,-37,85,-19,-21,81,9,127,-8,58,-30,80,90,7, 
  /* [86][0][][] */ -92,26,-17,2,13,41,-4,26,65,7,127,-9,-17,55,10,22, 
  /* [87][0][][] */ 4,-42,16,-41,35,-127,17,-26,45,3,73,-32,18,-22,-33,73, 
  /* [88][0][][] */ -118,60,17,-26,100,-15,90,65,-68,-85,89,-65,29,127,89,-90, 
  /* [89][0][][] */ -7,43,1,30,-53,127,11,21,-13,8,-34,25,-6,58,42,-76, 
  /* [90][0][][] */ 79,-65,53,-2,66,-12,35,3,32,-79,-127,-41,-18,-47,-69,6, 
  /* [91][0][][] */ -12,20,-55,24,17,-49,-127,55,-56,15,-17,-34,-46,-44,21,39, 
  /* [92][0][][] */ 44,23,36,25,-127,-108,24,-23,-31,26,-39,-70,-47,-89,-14,-11, 
  /* [93][0][][] */ -29,-72,-103,72,-74,-35,9,127,92,29,17,61,-59,88,-81,-43, 
  /* [94][0][][] */ 54,28,96,-48,24,-23,14,88,19,63,18,52,22,21,127,11, 
  /* [95][0][][] */ -64,-15,-2,-39,127,-22,38,57,-98,41,-82,-46,-16,19,-16,23, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0032900830265134573, 0.0015860175481066108, 0.0035551516339182854, 0.0025619030930101871, 0.0037876476999372244, 0.0014571576612070203, 0.0038844973314553499, 0.0030811249744147062, 0.0012454863172024488, 0.0043579577468335629, 0.0013951992150396109, 0.0031230761669576168, 0.0037582253571599722, 0.0044722296297550201, 0.001440866501070559, 0.0020190996583551168, 0.0025516063906252384, 0.0039280629716813564, 0.0030631283298134804, 0.0015922575257718563, 0.0024804375134408474, 0.0022476855665445328, 0.0030159216839820147, 0.0029438268393278122, 0.0011752441059798002, 0.0037472664844244719, 0.0028908546082675457, 0.0033354072365909815, 0.0017017720965668559, 0.0032249365467578173, 0.00326359155587852, 0.0023578261025249958, 0.0042006080038845539, 0.001582746859639883, 0.0022035872098058462, 0.0026855380274355412, 0.0026998622342944145, 0.0030306042172014713, 0.0030094597022980452, 0.0032151304185390472, 0.0014489158056676388, 0.0028258683159947395, 0.0037810856010764837, 0.0030270116403698921, 0.0016848735976964235, 0.002311409218236804, 0.0024017768446356058, 0.0018073897808790207, 0.0030896279495209455, 0.0034829720389097929, 0.0041463952511548996, 0.0034646422136574984, 0.002582227811217308, 0.0016700435662642121, 0.0021830650512129068, 0.0050763282924890518, 0.002366064116358757, 0.0011457712389528751, 0.0030932261142879725, 0.0025015242863446474, 0.0024464020971208811, 0.001382084796205163, 0.0026297168806195259, 0.0031524535734206438, 0.00073446211172267795, 0.0014917949447408319, 0.0030822779517620802, 0.0024227586109191179, 0.0029455940239131451, 0.0023360743653029203, 0.0037493605632334948, 0.0025283650029450655, 0.0028289840556681156, 0.0025323303416371346, 0.0027668443508446217, 0.0036037459503859282, 0.0031715789809823036, 0.0011704264907166362, 0.0020820603240281343, 0.0031980003695935011, 0.0027326487470418215, 0.0022769225761294365, 0.0035261018201708794, 0.00054648879449814558, 0.0037926919758319855, 0.0023225417826324701, 0.0023661050945520401, 0.003569785738363862, 0.0024505569599568844, 0.0039650276303291321, 0.0024385896977037191, 0.0021749068982899189, 0.0024743818212300539, 0.0032729404047131538, 0.0032204901799559593, 0.0021987876389175653, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -5171, 7145, -20543, -569, 15492, -15389, -33491, -9524, -7392, 5681, -17109, -17993, 2539, -12412, 977, -4603, };
const TfArray<16, float> quant20_scale = { 16, { 0.0001357340079266578, 0.00011681621253956109, 8.6943226051516831e-05, 0.00014468266454059631, 0.0001003007055260241, 0.00014869529695715755, 0.00015064844046719372, 0.00014906392607372254, 0.00010352473327657208, 9.1089641500730067e-05, 0.0001623867719899863, 0.00012984088971279562, 7.6963850005995482e-05, 9.5135306764859706e-05, 0.00010745815961854532, 0.00014692993136122823, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 36,42,17,-26,70,66,-29,57,-16,96,8,39,-18,13,-15,47,39,57,20,-56,-49,68,-13,44,54,30,40,54,-38,-56,-7,78,-15,1,-61,56,39,-127,-24,9,9,-23,58,7,-3,-35,-56,-1, 
  /* [1][0][][] */ -40,-10,-80,-31,12,87,-43,5,-34,-21,-25,37,65,-11,-14,-27,-27,-6,-15,7,-48,25,-109,-36,-65,-25,37,60,-14,-10,44,-22,6,-61,-21,35,4,-39,127,-51,-36,35,-54,-16,34,57,29,10, 
  /* [2][0][][] */ -7,-10,72,-42,-7,-86,18,29,80,88,-76,12,116,-66,127,102,-66,-28,-38,42,82,-57,-41,-106,19,-28,29,-69,36,35,-53,25,57,-43,47,53,-59,0,-7,-40,34,33,83,-22,17,-79,85,-44, 
  /* [3][0][][] */ 57,-10,-14,-53,20,121,10,-24,42,-51,18,-35,-34,-20,2,45,-34,-65,28,-104,-21,11,-25,-43,-19,84,127,52,-21,-26,19,40,72,-50,77,64,-37,-52,-13,41,50,-6,-17,14,12,17,1,1, 
  /* [4][0][][] */ 95,-14,8,-48,75,69,60,18,97,-32,-91,40,4,35,20,-27,-122,-109,-24,-100,-25,7,-17,-14,-108,122,-116,127,-58,-71,56,49,14,-31,7,-63,-9,12,-26,17,-62,-7,-6,31,-56,102,-11,-81, 
  /* [5][0][][] */ 9,8,-52,11,-9,63,17,-7,57,37,36,66,47,-26,30,-2,-45,127,-10,31,12,14,-48,-6,43,-7,-49,-45,-25,21,-2,-11,-21,7,44,19,-52,3,-79,4,98,-9,33,40,-17,-1,-33,37, 
  /* [6][0][][] */ 98,14,11,68,-6,-34,97,-61,32,54,112,117,9,64,-40,71,-2,-50,-76,75,39,-36,-28,88,-75,75,76,-24,100,45,-32,-25,96,-54,-110,-18,127,6,1,0,11,43,71,-65,64,86,36,-26, 
  /* [7][0][][] */ -82,-1,-32,21,-49,-49,24,55,67,111,-59,-66,-101,15,-18,-19,-104,85,12,113,-43,47,24,21,-20,-96,-31,-77,32,43,-5,-4,-12,13,1,1,-8,-46,127,-3,15,54,31,-13,46,75,-16,18, 
  /* [8][0][][] */ -42,-100,47,-50,63,-87,71,-40,-31,-117,32,6,-26,6,16,35,14,5,-23,126,12,32,-18,8,79,-10,-59,-25,-126,-15,-66,-123,5,-60,-1,99,-22,29,127,25,2,-9,71,110,22,-84,-34,75, 
  /* [9][0][][] */ 41,-48,42,-76,65,72,-39,43,25,-20,-34,6,38,-43,127,-22,-3,-123,31,67,-75,30,33,-50,-57,-89,-31,99,84,112,-35,-20,-56,43,-9,121,-17,-41,-61,-58,-60,-1,32,73,68,101,-64,-7, 
  /* [10][0][][] */ -22,22,-5,-5,36,5,-62,-45,48,39,58,-25,-36,-26,37,-45,-54,127,9,52,4,4,20,38,-36,72,9,102,32,8,-54,3,74,19,-7,26,-9,-53,-22,45,-86,-7,40,-25,37,39,17,27, 
  /* [11][0][][] */ -32,72,-24,55,41,74,-2,19,10,29,-125,-77,75,18,-22,-55,5,17,-38,-32,2,7,105,8,51,8,-19,38,-1,25,-12,66,31,-8,-48,-17,35,78,127,40,36,-6,85,-13,-57,-9,75,-6, 
  /* [12][0][][] */ -47,-7,45,16,-61,-55,-1,-4,-45,-32,-127,18,81,-118,31,39,30,118,71,-118,-31,83,-48,-70,18,-9,44,-37,-10,15,-35,60,104,61,37,-28,-41,-38,30,8,-16,23,76,-9,18,-24,-39,-26, 
  /* [13][0][][] */ -57,-94,-57,-91,10,42,60,29,-122,36,120,-58,32,56,116,-21,95,25,5,-108,104,-92,127,0,-110,19,-40,3,-26,-74,-115,51,38,4,-62,46,6,-47,108,-84,-20,66,76,4,72,-17,109,-77, 
  /* [14][0][][] */ 62,2,-73,11,-35,15,-74,-34,-38,73,48,33,-6,-72,22,-49,52,-119,28,21,109,-95,15,-20,-28,123,-102,-2,-41,-24,-104,32,117,17,92,-18,-127,23,-11,51,-41,-30,88,-13,-45,-24,-75,56, 
  /* [15][0][][] */ -49,24,34,5,71,3,-12,30,23,69,-13,38,45,-33,-32,-19,-2,33,-5,-30,36,-17,-39,-40,45,-52,-22,59,-40,4,7,0,-37,-2,127,4,-72,10,52,-12,-35,-23,27,-14,-41,-29,-5,20, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.005768695380538702, 0.0049646887928247452, 0.0036950870417058468, 0.0061490130610764027, 0.0042627798393368721, 0.0063195498660206795, 0.0064025586470961571, 0.0063352165743708611, 0.0043998011387884617, 0.0038713098037987947, 0.0069014378823339939, 0.0055182375945150852, 0.0032709634397178888, 0.0040432503446936607, 0.0045669716782867908, 0.0062445220537483692, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 10908, 391, 16433, 56, 8920, -2051, 45760, 302, 8378, 59686, 6940, 21333, 713, 13088, 34274, 34302, 1123, -261, 7859, 30678, 256, 18845, 2845, 19475, 15792, 29340, -2137, -317, 797, 10290, 14993, -657, 873, 4253, 3822, 15779, 15084, 35009, 1801, 18601, 19499, 4026, 395, 9639, 5773, 8659, 35291, 22159, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6484818893950433e-05, 0.0001011741187539883, 7.2458045906387269e-05, 0.00011784192611230537, 0.0001215470110764727, 7.7636272180825472e-05, 3.7928639358142391e-05, 0.0002184855256928131, 0.00010394685523351654, 3.249362634960562e-05, 4.6364097215700895e-05, 7.6158532465342432e-05, 8.8571985543239862e-05, 0.0001329100487055257, 4.3981352064292878e-05, 5.4457002988783643e-05, 9.9812546977773309e-05, 7.6262294896878302e-05, 0.00011617442942224443, 7.0499139837920666e-05, 7.3285533289890736e-05, 7.1144371759146452e-05, 5.660797978634946e-05, 0.00010916703467955813, 9.3578848463948816e-05, 7.5334741268306971e-05, 9.2097921879030764e-05, 5.6231248890981078e-05, 0.00027637768653221428, 0.00011376852489775047, 0.00012220005737617612, 0.00025628495495766401, 7.7701261034235358e-05, 0.00013117243361193687, 8.8682885689195246e-05, 6.2361221353057772e-05, 8.9865439804270864e-05, 4.9289563321508467e-05, 9.2230424343142658e-05, 9.3744885816704482e-05, 0.00010646462760632858, 0.00019097846234217286, 0.00018792811897583306, 8.1331883848179132e-05, 0.00017196037515532225, 3.6651319533120841e-05, 5.4129744967212901e-05, 8.5748521087225527e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -100,45,-98,111,-39,82,-24,73,-47,-127,96,-80,61,-75,-42,-108,109,68,48,-102,82,-124,96,-127,-41,8,28,99,-82,-56,-90,121,127,-90,48,-97,-91,-127,83,-67,10,-73,127,-15,81,43,-34,-56, -127,84,-81,127,-99,100,-53,78,-90,-105,108,-127,75,-127,-34,-127,125,127,90,-127,91,-127,100,-120,-53,-47,22,102,10,-109,-73,32,95,-127,81,-90,-66,-111,127,75,-41,92,76,-8,-67,90,-58,-96, -6,48,18,55,-13,64,-53,19,-76,-30,35,-54,23,-79,3,-68,17,40,67,-48,15,-121,23,-76,-99,4,-7,48,51,-34,-27,-47,-15,-80,50,7,-127,-90,30,-52,-127,-64,58,-49,-127,110,1,-127, 
  /* [0][1][][] */ -115,102,-56,106,15,127,-113,91,-99,-100,110,-38,57,-38,-96,-126,98,88,-40,-28,121,-104,110,-49,-123,-127,127,116,-127,-36,-54,94,116,2,95,-84,-120,-53,90,-76,-65,-127,108,-125,110,73,-76,-111, -109,114,-127,89,-127,106,-109,52,-127,-114,127,-97,127,-83,-127,-98,127,118,-72,-30,127,-107,127,-73,-31,-99,108,127,5,-127,-127,127,116,-3,127,-65,-94,-79,105,-120,-62,84,126,-41,-70,127,-127,-75, -40,49,-53,-7,-47,20,-127,55,-46,-64,65,-71,59,-45,-52,-32,43,42,-68,5,38,-77,53,-77,-10,-35,42,65,86,-92,-51,-8,27,-13,55,-127,-89,-14,48,1,-37,-56,65,-91,-108,89,-18,-64, 
  /* [0][2][][] */ -54,93,0,28,41,36,-89,88,-32,-102,43,-59,18,-56,-31,-123,99,43,-87,0,37,4,55,-55,-127,-67,22,0,-81,5,-5,93,52,22,40,-95,-59,-26,52,-127,-93,-61,39,-48,74,48,-55,-24, -23,127,-73,11,-58,11,-95,57,-25,-118,34,-75,29,-35,-21,-89,116,29,-127,-29,-13,-2,63,-68,-96,-71,42,31,2,-22,-62,74,67,27,51,-97,-89,-46,50,-127,-58,90,25,-127,-33,74,-54,-62, -3,123,-54,-10,-46,-30,-80,127,8,-43,8,-22,41,-41,25,-2,89,2,-81,2,-13,35,69,-52,-15,-48,51,39,60,27,0,11,24,8,27,-105,-31,-59,34,-88,-25,-21,1,-46,-36,65,-31,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036756047047674656, 0.0042999000288546085, 0.003079466987401247, 0.0050082816742360592, 0.0051657478325068951, 0.0032995415385812521, 0.0016119671054184437, 0.009285634383559227, 0.0044177412055432796, 0.0013809790834784508, 0.0019704741425812244, 0.0032367375679314137, 0.0037643094547092915, 0.0056486767716705799, 0.0018692073645070195, 0.0023144225124269724, 0.0042420332320034504, 0.0032411476131528616, 0.0049374131485819817, 0.0029962135013192892, 0.0031146351248025894, 0.003023635596036911, 0.0024058390408754349, 0.0046395990066230297, 0.0039771008305251598, 0.003201726358383894, 0.0039141615852713585, 0.0023898279760032892, 0.011746051721274853, 0.0048351623117923737, 0.0051935021765530109, 0.010892109945416451, 0.003302303608506918, 0.0055748280137777328, 0.0037690226454287767, 0.0026503519620746374, 0.0038192810025066137, 0.0020948064047843218, 0.003919792827218771, 0.0039841574616730213, 0.0045247464440762997, 0.0081165842711925507, 0.0079869451001286507, 0.0034566051326692104, 0.0073083159513771534, 0.0015576810110360384, 0.0023005141410976648, 0.0036443120334297419, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1977, -1277, 656, -1548, 2386, -323, 3031, -3697, 901, 664, 1975, 1744, 493, 5, 544, 3940, -1925, 4112, 5305, 1495, -833, 2683, -348, 3876, 2172, 1139, 1717, -886, 6154, -585, 1718, -1284, -382, 2721, -1061, 1555, 2299, 881, 450, 3058, 2525, 10692, -2262, 985, 8249, 593, 3650, 3051, };
const TfArray<48, float> quant24_scale = { 48, { 0.00022591270681004971, 0.00031888502417132258, 0.0003246240084990859, 0.00030256345053203404, 0.00029235382680781186, 0.00027296663029119372, 0.00022792298113927245, 0.00014824382378719747, 0.00033644589711911976, 0.00031796039547771215, 0.00023616047110408545, 0.00034333849907852709, 0.00029998869285918772, 0.00027092418167740107, 0.00035718406434170902, 0.00019113533198833466, 0.00028620767989195883, 0.00019718978728633374, 0.00017464264237787575, 0.00025769692729227245, 0.0002572992816567421, 0.00023822551884222776, 0.00029063792317174375, 0.00019685948791448027, 0.00025006569921970367, 0.00028134157764725387, 0.00025032844860106707, 0.0003251841408200562, 0.00014467549044638872, 0.00035515229683369398, 0.00021268082491587847, 0.00021045625908300281, 0.00020447587303351611, 0.00025961222127079964, 0.00025774049572646618, 0.00027882435824722052, 0.00022370331862475723, 0.00024036175454966724, 0.00022861805337015539, 0.00024101953022181988, 0.00025976315373554826, 9.0608984464779496e-05, 0.00019740629068110138, 0.00033801834797486663, 0.0001075992695405148, 0.00025357626145705581, 0.00020405165560077876, 0.00022341289150062948, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 63,3,127,-9,71,99,-66,-53, 
  /* [1][0][][] */ 3,-73,-127,2,52,9,34,7, 
  /* [2][0][][] */ -127,-3,-67,-48,58,39,-80,-55, 
  /* [3][0][][] */ 47,52,127,-63,-15,-100,-17,-3, 
  /* [4][0][][] */ -127,32,-34,-12,38,1,-51,-46, 
  /* [5][0][][] */ -118,51,-56,0,8,48,-110,-127, 
  /* [6][0][][] */ -4,-127,-118,57,100,-8,13,40, 
  /* [7][0][][] */ -77,-127,-119,-99,-86,-62,-1,107, 
  /* [8][0][][] */ 86,40,2,4,105,-66,-127,32, 
  /* [9][0][][] */ -48,64,-51,89,-51,-30,127,-19, 
  /* [10][0][][] */ -24,104,29,52,127,0,-18,54, 
  /* [11][0][][] */ -93,-56,-6,-7,-76,127,91,27, 
  /* [12][0][][] */ 80,17,-127,25,-14,-29,-55,-25, 
  /* [13][0][][] */ 74,-45,-102,34,-1,-127,-33,-39, 
  /* [14][0][][] */ 3,-45,53,-7,99,-127,-49,8, 
  /* [15][0][][] */ -32,-37,12,127,31,69,-78,34, 
  /* [16][0][][] */ 96,26,-47,37,74,-98,-127,-9, 
  /* [17][0][][] */ 61,127,67,80,51,68,33,-108, 
  /* [18][0][][] */ 33,4,-7,9,127,9,28,-26, 
  /* [19][0][][] */ 7,123,40,-6,-127,29,28,-54, 
  /* [20][0][][] */ -61,-22,68,-127,29,33,-22,115, 
  /* [21][0][][] */ -46,47,63,-127,3,50,-5,86, 
  /* [22][0][][] */ -55,-71,-96,28,-127,96,83,-47, 
  /* [23][0][][] */ 80,36,-127,-4,-7,-31,-85,23, 
  /* [24][0][][] */ -21,36,-13,24,-12,66,-127,91, 
  /* [25][0][][] */ -65,-58,-127,-6,-41,-67,40,84, 
  /* [26][0][][] */ 59,-4,-57,-40,99,-24,127,-49, 
  /* [27][0][][] */ 127,-48,20,106,14,41,-35,97, 
  /* [28][0][][] */ 58,73,45,-3,127,-75,114,-37, 
  /* [29][0][][] */ -57,7,-14,-48,-65,48,127,-11, 
  /* [30][0][][] */ 57,-120,-88,-61,-127,-19,-21,-40, 
  /* [31][0][][] */ 13,17,1,-16,-127,24,-30,-19, 
  /* [32][0][][] */ 58,-64,-67,82,-33,-82,105,-127, 
  /* [33][0][][] */ 50,127,39,89,78,-26,-43,7, 
  /* [34][0][][] */ -127,-52,112,-17,-18,96,101,28, 
  /* [35][0][][] */ -57,78,127,20,-61,-38,-56,53, 
  /* [36][0][][] */ -75,-6,108,-18,-43,127,108,-11, 
  /* [37][0][][] */ -3,-73,-42,-127,-53,-100,70,41, 
  /* [38][0][][] */ 40,-17,92,-76,52,53,-127,2, 
  /* [39][0][][] */ -17,127,-101,-41,-13,13,-13,89, 
  /* [40][0][][] */ 76,-68,30,24,23,28,3,127, 
  /* [41][0][][] */ -64,127,93,13,37,98,-36,25, 
  /* [42][0][][] */ 55,-127,-93,-13,-105,7,4,-106, 
  /* [43][0][][] */ -11,-74,45,-13,127,-40,10,45, 
  /* [44][0][][] */ -8,120,127,62,3,51,-118,61, 
  /* [45][0][][] */ -52,85,-8,84,-122,81,-127,15, 
  /* [46][0][][] */ -42,-27,32,50,-116,-127,-10,3, 
  /* [47][0][][] */ -15,74,36,-117,-127,12,-11,31, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0021805688738822937, 0.0030779622029513121, 0.0031333563383668661, 0.0029204220045357943, 0.0028218759689480066, 0.0026347455568611622, 0.0021999725140631199, 0.0014308883110061288, 0.0032474643085151911, 0.0030690373387187719, 0.0022794830147176981, 0.0033139935694634914, 0.0028955696616321802, 0.0026150313206017017, 0.0034476346336305141, 0.0018448885530233383, 0.0027625516522675753, 0.0019033276475965977, 0.0016856967704370618, 0.0024873586371541023, 0.0024835201911628246, 0.0022994154132902622, 0.0028053137939423323, 0.0019001394975930452, 0.0024136998690664768, 0.0027155829593539238, 0.0024162360932677984, 0.0031387628987431526, 0.0013964459067210555, 0.0034280233085155487, 0.0020528512541204691, 0.0020313791465014219, 0.00197365484200418, 0.0025058453902602196, 0.0024877791292965412, 0.0026912861503660679, 0.0021592432167381048, 0.0023200348950922489, 0.0022066815290600061, 0.0023263839539140463, 0.0025073022115975618, 0.00087458174675703049, 0.001905417419038713, 0.0032626420725136995, 0.0010385764762759209, 0.0024475846439599991, 0.001969560282304883, 0.0021564399357885122, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 5820, -3503, 23529, -5402, 4522, -17022, 3602, -13888, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.5928088335786015e-05, 0.00010144275438506156, 0.00013673151261173189, 0.00010257098620058969, 8.9393877715338022e-05, 0.00014661562454421073, 7.9701931099407375e-05, 0.0001108606084017083, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -50,-44,-17,-83,-4,-31,76,79,-105,-103,-46,10,-97,12,-50,-1,-90,5,-17,127,44,-51,19,113,88,44,4,10,-72,-55,-79,-39,-60,107,36,-46,74,-40,118,-26,5,12,-5,-111,29,-31,-36,-95, 
  /* [1][0][][] */ -12,46,2,-40,-55,65,-14,-37,-5,59,-20,12,64,30,-39,3,-5,-105,101,-23,127,8,-33,32,30,-13,-62,58,55,-13,61,13,-30,-13,7,-4,-10,99,-15,-23,38,13,-16,11,70,4,-37,66, 
  /* [2][0][][] */ -23,-14,127,1,97,-17,-17,24,-12,-1,-9,60,18,-53,-48,-113,-51,-104,-15,23,-105,36,-38,-48,-62,32,7,-68,-30,-2,-26,-49,-4,-1,59,-15,13,-27,-54,17,40,-58,13,-41,-52,-59,-48,-59, 
  /* [3][0][][] */ 76,16,69,0,24,-38,40,99,-35,-28,26,-38,-52,60,-9,57,57,13,-33,27,-80,-41,119,19,12,11,-49,8,-32,42,127,-58,11,-115,-39,36,-9,-68,-11,56,-88,-41,68,8,-100,-75,75,-11, 
  /* [4][0][][] */ 26,-1,91,-38,17,-1,10,-13,-67,-10,-29,13,40,-86,42,-116,27,39,-4,-38,12,34,3,17,18,24,86,-17,46,27,-127,-24,-13,-36,-1,29,32,0,37,18,-54,-11,-84,38,-25,-82,14,35, 
  /* [5][0][][] */ 8,-51,67,46,35,6,27,11,-58,-11,-52,35,52,18,12,-19,86,72,-9,-18,74,-44,127,-95,-23,23,24,45,23,3,-14,-25,-25,-48,-46,5,30,33,63,2,-77,24,27,27,39,-10,66,-9, 
  /* [6][0][][] */ -37,43,-127,102,63,26,18,5,-26,0,54,-55,-74,-18,-10,20,-108,15,-27,78,21,19,-90,-82,-25,-33,15,69,-35,-35,-18,22,30,52,-34,-22,-22,11,80,-8,70,73,-116,-56,-48,112,-45,-37, 
  /* [7][0][][] */ 30,43,-61,15,1,95,127,79,31,65,-71,-34,-24,-14,-63,-32,3,34,112,54,72,12,105,14,100,109,-33,81,-67,43,4,-70,17,-50,-14,2,8,80,-57,81,-57,32,16,-66,89,-13,39,-22, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0032269435469061136, 0.0043113171122968197, 0.0058110891841351986, 0.0043592667207121849, 0.0037992398720234632, 0.0062311636283993721, 0.0033873319625854492, 0.0047115758061408997, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 1402, 11627, -1474, 114, 3226, -2064, 1481, 2064, -425, -1459, -7348, -258, 3834, -1090, -3676, 2170, 9370, 3560, -2588, -7056, -8948, 3585, 25168, -6117, -3527, -173, 1921, -6113, 2988, -1278, -4009, 9138, 5127, -1474, 3406, 542, -46, -990, 15613, -2416, 5835, -2608, 613, 4632, -2242, 7545, 2384, -958, };
const TfArray<48, float> quant28_scale = { 48, { 0.000334929209202528, 0.00011776066094171256, 0.0013796240091323853, 0.00030076107941567898, 0.00029131793417036533, 0.00030376660288311541, 0.00022081176575738937, 0.00031562271760776639, 0.00015206515672616661, 0.0003072819672524929, 0.00018170375551562756, 0.0010038575856015086, 0.00043401634320616722, 0.00037866225466132164, 0.00027004408184438944, 0.0007529657450504601, 0.00014055895735509694, 5.4128413466969505e-05, 0.00024719155044294894, 0.00021729362197220325, 0.00023743243946228176, 0.0001924224488902837, 7.6145770435687155e-05, 0.00034626611159183085, 0.00021554365230258554, 0.00041619877447374165, 0.00064196059247478843, 0.00022859156888443977, 0.00017815113824326545, 0.00050912919687107205, 0.00017620691505726427, 9.353947825729847e-05, 0.00011810759315267205, 0.00012696394696831703, 0.00015757573419250548, 0.00030566618079319596, 0.0026498269289731979, 0.00033405120484530926, 9.818688704399392e-05, 0.00025354663375765085, 0.00016832836263347417, 0.00014675687998533249, 0.0003052449319511652, 0.00022926968813408166, 0.00038508334546349943, 0.00012338494707364589, 4.7335972340079024e-05, 0.00019517492910381407, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 20,-41,8,14,-56,-84,-35,35,-67,4,14,0,42,12,-6,9,116,46,55,20,-1,-28,-120,42,24,-13,17,-17,-80,72,-53,-115,43,32,-50,-60,-13,-33,2,-6,-7,57,13,-38,-18,52,127,5, -127,-77,-17,127,-94,94,-93,107,-1,53,-3,-4,51,36,-6,-37,-43,87,28,12,28,98,-6,127,127,-38,-17,45,89,-110,-36,-103,47,26,-23,-119,27,22,-50,5,-121,10,-106,-127,42,43,35,127, -32,-1,13,6,-46,60,12,48,-13,-10,-23,7,-46,13,-8,11,-76,56,-62,-19,11,-32,127,40,-11,-6,40,13,29,37,-11,33,-13,13,-9,47,14,0,-1,67,42,-9,45,-26,-3,24,-41,-3, 
  /* [0][1][][] */ -3,-27,-28,-12,15,-92,127,-69,-37,4,43,31,127,30,23,-24,-49,-30,82,73,68,-78,26,19,-43,127,-69,0,120,-85,18,-127,-16,20,-71,14,8,-53,-72,16,126,127,31,-88,-74,-64,-14,86, 83,-127,127,-9,127,109,-43,-59,18,127,127,-127,-104,127,127,127,127,127,127,127,127,81,10,4,101,-94,-127,112,31,127,127,-21,-127,127,118,127,-127,127,-127,-61,43,20,-127,-8,127,-127,-23,78, 4,35,-40,-10,-64,127,-114,73,75,-52,13,74,-59,23,36,-54,-7,-35,-98,18,30,-127,-91,11,83,-16,-20,127,-100,-27,12,-72,-31,37,127,-22,50,-3,-32,-76,117,-13,46,41,-73,65,110,-89, 
  /* [0][2][][] */ -1,-12,5,-31,4,-49,-4,-20,-1,12,3,8,-34,-1,2,4,-81,43,48,-33,11,-26,106,-7,-100,6,46,10,-8,-4,-24,48,16,-2,-51,22,-3,-3,7,40,-31,-13,19,22,0,16,8,12, 44,-48,-35,-31,29,31,110,-127,127,-9,3,14,-87,-18,-25,-71,-26,117,12,22,5,21,-21,-34,-81,59,80,-53,-127,16,-55,3,-12,4,-29,16,58,-22,-3,127,-127,-5,-10,69,55,41,41,-117, -18,2,1,-27,-17,8,-10,-93,-46,6,-2,19,-5,1,-11,15,46,34,-14,-13,-3,-31,-84,-13,31,-28,27,-28,-53,8,-42,16,41,-1,7,-44,7,7,3,5,-9,-14,13,20,-2,15,111,-61, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.014234490692615509, 0.0050048278644680977, 0.058634020388126373, 0.012782345525920391, 0.012381012551486492, 0.012910080142319202, 0.0093844998627901077, 0.01341396477073431, 0.0064627691172063351, 0.013059483841061592, 0.0077224094420671463, 0.042663946747779846, 0.018445694819092751, 0.016093146055936813, 0.01147687342017889, 0.032001044601202011, 0.0059737553820014, 0.0023004575632512569, 0.010505640879273415, 0.0092349788174033165, 0.01009087823331356, 0.0081779537722468376, 0.0032361953053623438, 0.014716309495270252, 0.0091606052592396736, 0.0176884476095438, 0.027283325791358948, 0.0097151417285203934, 0.0075714229606091976, 0.021637991070747375, 0.0074887936934828758, 0.0039754277095198631, 0.0050195725634694099, 0.0053959675133228302, 0.0066969688050448895, 0.01299081277102232, 0.11261764168739319, 0.014197175391018391, 0.0041729426011443138, 0.0107757318764925, 0.0071539552882313728, 0.0062371673993766308, 0.012972909957170486, 0.0097439615055918694, 0.016366042196750641, 0.0052438601851463318, 0.0020117787644267082, 0.008294934406876564, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2481, 3310, 27613, 1418, 2518, -1286, 2496, 17594, 3519, -925, 4443, -1279, 14210, -1713, 1870, 17126, -262, 1381, 28, 3359, 3966, 2756, 567, 12408, 4375, 2399, 9941, 1102, 4240, 2766, 649, 552, 735, 1263, -173, 37, -2629, -448, 1805, 2136, 3863, 2846, 3435, 3274, 3685, 2775, 1229, 5439, };
const TfArray<48, float> quant30_scale = { 48, { 0.00028402757016010582, 0.00024221724015660584, 4.3298656237311661e-05, 0.00025602497044019401, 0.00028903546626679599, 0.00027102002059109509, 0.00025768732302822173, 5.8205514505971223e-05, 0.00019040185725316405, 0.00029864511452615261, 0.00019002761109732091, 0.0003604510857257992, 7.5257419666741043e-05, 0.00029672990785911679, 0.00029985469882376492, 6.3148414483293891e-05, 0.00045753366430290043, 0.00033508014166727662, 0.00042459965334273875, 0.00022038840688765049, 0.00020860291260760278, 0.00025293976068496704, 0.00036789078149013221, 8.3488346717786044e-05, 0.00019922252977266908, 0.00026661084848456085, 0.00010225058940704912, 0.0003630559949669987, 0.00017340348858851939, 0.00024796853540465236, 0.00048551263171248138, 0.00061410979833453894, 0.00034188441350124776, 0.0002133681409759447, 0.00033514614915475249, 0.00040226764394901693, 0.00024235565797425807, 0.00031178534845821559, 0.00026592990616336465, 0.00022759696003049612, 0.00020271705579943955, 0.00022760938736610115, 0.00023240935115609318, 0.00025263300631195307, 0.00019731240172404796, 0.0002941582933999598, 0.0004656279634218663, 0.00015970428648870438, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 81,127,-64,-58,35,59,-2,43, 
  /* [1][0][][] */ 75,-68,51,-127,-59,44,-87,-48, 
  /* [2][0][][] */ -47,127,115,54,127,-27,68,10, 
  /* [3][0][][] */ 99,36,-66,46,-17,-87,-127,-35, 
  /* [4][0][][] */ -23,-3,3,-90,-31,46,127,-3, 
  /* [5][0][][] */ 52,97,-127,-94,33,70,35,-48, 
  /* [6][0][][] */ -28,127,61,61,67,-2,-31,-76, 
  /* [7][0][][] */ 108,-19,-52,-1,1,25,127,22, 
  /* [8][0][][] */ 34,127,43,98,88,89,71,-57, 
  /* [9][0][][] */ 39,83,-127,-83,27,108,-10,96, 
  /* [10][0][][] */ -57,-48,25,-50,-24,-40,-60,127, 
  /* [11][0][][] */ 12,-48,-127,-29,35,-6,32,4, 
  /* [12][0][][] */ -62,-93,-127,22,-98,6,-91,68, 
  /* [13][0][][] */ -15,6,-85,98,-127,3,15,-33, 
  /* [14][0][][] */ -38,-31,-127,3,35,-40,-29,-57, 
  /* [15][0][][] */ 56,-100,-127,10,-123,-24,-9,-48, 
  /* [16][0][][] */ 127,-57,-3,75,-79,6,13,75, 
  /* [17][0][][] */ 2,114,127,-30,-56,-37,-52,-26, 
  /* [18][0][][] */ 14,-127,23,60,-17,-83,67,-73, 
  /* [19][0][][] */ 127,-46,-69,33,-96,11,47,81, 
  /* [20][0][][] */ -20,-127,88,58,-9,-93,6,-95, 
  /* [21][0][][] */ -4,-73,-22,-30,127,-11,55,7, 
  /* [22][0][][] */ -127,43,-72,41,76,32,-98,-87, 
  /* [23][0][][] */ -80,-40,85,-34,-74,119,127,-51, 
  /* [24][0][][] */ 11,51,-26,-40,-40,91,127,-32, 
  /* [25][0][][] */ -42,-65,-127,-33,-12,-22,11,-60, 
  /* [26][0][][] */ 9,70,-27,127,-41,19,-53,-16, 
  /* [27][0][][] */ 13,-121,36,58,20,-50,2,-127, 
  /* [28][0][][] */ -41,111,104,78,127,-8,8,-35, 
  /* [29][0][][] */ 127,-7,-36,-20,47,-108,-31,-6, 
  /* [30][0][][] */ 32,-18,37,-127,31,-21,5,-44, 
  /* [31][0][][] */ 37,-39,14,44,-8,30,5,127, 
  /* [32][0][][] */ -61,-40,13,-66,-34,127,92,57, 
  /* [33][0][][] */ -52,61,45,-42,11,127,-108,95, 
  /* [34][0][][] */ 17,127,-61,-47,5,44,-84,91, 
  /* [35][0][][] */ 11,-127,31,55,8,-61,48,-72, 
  /* [36][0][][] */ -6,-28,-89,-15,-127,-44,-4,11, 
  /* [37][0][][] */ -92,-110,127,88,-29,-75,-25,-57, 
  /* [38][0][][] */ -89,33,89,-54,-127,-58,-50,108, 
  /* [39][0][][] */ 127,-126,91,51,-27,-117,-46,-79, 
  /* [40][0][][] */ -14,60,34,64,-127,8,-67,13, 
  /* [41][0][][] */ 119,106,-85,-127,50,15,-14,8, 
  /* [42][0][][] */ -39,-29,-10,-10,127,40,35,32, 
  /* [43][0][][] */ 127,3,69,24,-71,-42,62,66, 
  /* [44][0][][] */ 68,67,-85,7,108,-127,-109,-6, 
  /* [45][0][][] */ 30,2,7,36,78,-127,4,-56, 
  /* [46][0][][] */ 72,-47,9,127,56,48,6,74, 
  /* [47][0][][] */ -108,-105,56,115,-74,12,127,-87, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0031824435573071241, 0.0027139713056385517, 0.00048514839727431536, 0.002868682611733675, 0.0032385555095970631, 0.0030366978608071804, 0.0028873088303953409, 0.00065217528026551008, 0.0021333955228328705, 0.0033462285064160824, 0.0021292022429406643, 0.004038746003061533, 0.00084323674673214555, 0.0033247692044824362, 0.0033597815781831741, 0.00070755899650976062, 0.0051265270449221134, 0.0037544721271842718, 0.0047575114294886589, 0.0024693857412785292, 0.0023373328149318695, 0.0028341137804090977, 0.0041221054270863533, 0.0009354617795906961, 0.0022322284057736397, 0.0029872942250221968, 0.0011456870706751943, 0.0040679331868886948, 0.0019429338863119483, 0.0027784127742052078, 0.0054400227963924408, 0.0068809152580797672, 0.0038307118229568005, 0.0023907257709652185, 0.0037552115973085165, 0.0045072878710925579, 0.0027155221905559301, 0.0034934610594063997, 0.0029796645976603031, 0.0025501553900539875, 0.0022713835351169109, 0.0025502946227788925, 0.0026040768716484308, 0.0028306767344474792, 0.0022108261473476887, 0.0032959550153464079, 0.0052172210998833179, 0.0017894385382533073, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 6595, 10471, -9069, 4402, -388, 1588, -13181, -18382, };
const TfArray<8, float> quant32_scale = { 8, { 0.00022085460659582168, 9.855403914116323e-05, 0.00014179942081682384, 0.00013567849237006158, 0.00019359521684236825, 0.00010945604299195111, 0.00017581878637429327, 0.00011460966197773814, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -37,3,38,-1,-40,-17,11,13,-39,-5,-62,-45,-21,-61,-5,-40,34,-30,29,42,-23,31,-20,7,3,-27,44,-2,-9,-14,13,9,65,22,24,-127,15,-8,-26,-23,-7,-23,34,34,27,2,24,-1, 
  /* [1][0][][] */ -2,22,54,-32,-13,71,-64,-52,1,29,6,-61,20,96,-11,57,-32,13,-26,-44,22,-65,-31,23,-79,4,5,-92,-22,-3,42,-48,54,85,-19,5,93,-29,-6,67,-46,31,-78,-39,127,-32,-18,-29, 
  /* [2][0][][] */ -12,-41,-76,9,0,75,27,4,-13,57,-4,37,76,-90,22,-39,35,-86,18,34,-29,60,-14,18,-21,73,-32,-65,21,9,19,-50,-42,-82,38,-20,85,20,-4,-49,1,26,92,30,127,5,31,25, 
  /* [3][0][][] */ -9,28,-61,28,19,-28,-52,-90,18,-8,-23,5,9,20,49,77,3,10,-35,39,4,-85,35,-54,-73,4,127,-5,-43,3,-52,15,-3,-82,14,-10,-18,-39,-17,95,-37,-42,-7,11,37,-1,-15,37, 
  /* [4][0][][] */ -35,-50,-7,-4,34,-22,-7,2,28,-26,67,-85,-1,28,11,14,-27,-24,2,-22,10,-57,0,-24,25,-25,40,46,44,14,-18,36,-3,8,7,4,-77,90,50,-22,23,-32,-19,-13,-86,13,127,18, 
  /* [5][0][][] */ 50,-47,2,20,49,-25,46,-127,43,-17,-5,123,-71,67,10,-60,13,-107,25,4,-35,70,-30,-54,-60,87,-17,-3,-3,50,-39,-52,23,56,49,-1,-43,2,-30,-46,39,-42,-47,-4,-24,56,98,14, 
  /* [6][0][][] */ 45,-15,30,-18,-29,-29,-23,26,-52,-2,-56,127,-46,-46,-20,63,6,44,13,37,28,-77,-13,17,29,34,-69,10,10,-47,17,49,17,24,-13,0,8,4,8,-8,-1,-24,33,65,-8,-29,66,-6, 
  /* [7][0][][] */ -13,-13,-28,77,44,37,5,25,28,6,66,0,120,114,67,49,49,48,-18,-14,20,-27,-103,-19,13,-7,-25,60,35,-25,-41,-30,28,-1,39,-101,-85,37,35,52,-24,45,104,127,-66,-10,-116,67, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.009386320598423481, 0.0041885464452207088, 0.0060264752246439457, 0.0057663358747959137, 0.0082277962937951088, 0.0046518817543983459, 0.0074722981080412865, 0.0048709106631577015, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 7703, 5093, 5943, 393, 2513, -952, 2542, 32621, 4647, 2253, 7535, 54535, 4930, 4285, -967, 11204, -828, 11804, 2535, 13383, 8114, 611, 2919, -8363, 26344, 3692, 6459, 14273, 1853, 35, -8915, 8792, 2660, 4060, -1268, 1521, -12326, 9733, 1334, 16563, 1399, -4361, 5731, -570, 1700, 103, 4805, -388, };
const TfArray<48, float> quant34_scale = { 48, { 7.2438757342752069e-05, 0.00011715028813341632, 0.00015155893925111741, 0.00019530163262970746, 0.00048502994468435645, 0.00020255103299859911, 8.5444604337681085e-05, 6.4503459725528955e-05, 0.00020023416436742991, 8.791552681941539e-05, 5.8928955695591867e-05, 5.4284551879391074e-05, 6.955397839192301e-05, 5.2391951612662524e-05, 0.00023361944477073848, 0.00016908402903936803, 0.00013752377708442509, 0.00052560522453859448, 9.9160104582551867e-05, 8.6143641965463758e-05, 0.00012113784032408148, 0.00044312421232461929, 0.00010521536751184613, 0.00017630240472499281, 4.7134264605119824e-05, 7.8088334703352302e-05, 4.1700721340021119e-05, 9.1764617536682636e-05, 0.00024139025481417775, 0.0012196531752124429, 0.00018668966367840767, 9.222707012668252e-05, 8.0217927461490035e-05, 0.00012332217011135072, 0.00017289159586653113, 0.00010658454266376793, 7.4355892138555646e-05, 5.3203395509626716e-05, 0.00015260814689099789, 7.4066170782316476e-05, 0.00011455843923613429, 0.00017594030941836536, 7.8981924161780626e-05, 9.5487877842970192e-05, 7.6716591138392687e-05, 0.00029424953390844166, 6.3468120060861111e-05, 0.00025095991441048682, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-88,-47,-26,127,-81,12,-46,-92,-85,2,-36,119,36,77,-97,67,-28,7,-61,-19,60,25,-12,-22,38,63,-15,63,-76,-22,-44,-109,-98,40,63,26,66,109,-56,-127,-3,30,55,67,-124,96,100, -63,-39,-99,50,-84,115,47,-12,-82,66,91,-127,127,124,127,-61,-99,-127,38,-58,4,67,-44,110,-97,104,118,-125,72,-54,-20,-71,-54,-127,76,127,127,127,127,-59,-117,-37,60,81,79,113,114,74, -21,-22,-73,84,-76,-3,-7,20,78,1,63,-99,33,56,29,-5,-72,-1,31,9,-7,-56,-127,1,-48,60,42,-37,31,53,127,-76,9,-1,-20,47,97,42,25,8,-25,113,54,27,27,22,17,-98, 
  /* [0][1][][] */ -122,-99,-97,-91,-92,-95,127,-127,-127,-127,65,-33,113,38,-92,-98,127,-121,-72,-117,-94,47,-9,-14,-43,63,116,-57,-103,-81,-15,-44,-117,-105,-127,71,14,40,4,-91,34,-12,101,106,80,109,83,-110, -127,-127,-127,-90,-43,127,118,-93,50,75,127,-69,107,127,65,-127,49,-76,-127,-127,-127,127,-122,127,-80,127,127,-127,-127,127,-5,-127,-127,-114,59,81,91,112,-4,-127,64,-106,127,127,127,-3,127,127, -36,-39,-121,127,42,-39,109,-1,47,12,32,-19,23,79,96,-67,-10,28,-28,-69,-80,14,-113,-10,-127,63,11,-67,-59,32,107,-68,-83,-22,77,50,116,65,-22,-29,27,127,77,30,34,-61,10,40, 
  /* [0][2][][] */ -67,-52,-31,12,-21,-50,4,-64,-27,-55,27,-45,25,26,-15,-4,-125,3,82,-50,-13,4,-108,-33,-43,85,80,-28,32,62,-19,1,45,-96,-52,1,9,-10,-83,-20,8,18,48,18,19,53,1,-105, -35,-53,-18,-68,95,48,69,-71,37,35,-22,-46,-14,98,-97,-50,8,23,31,-78,-33,35,-77,79,-78,100,76,-32,37,3,-26,-27,-62,-53,-75,37,23,24,-120,-56,7,-40,73,47,55,-127,14,-43, 11,-8,-17,-19,-24,-4,37,-12,-103,4,0,-24,-11,24,85,-38,2,67,-10,-55,-32,-51,-50,-27,-96,35,24,-26,11,-73,68,-28,-61,12,20,17,33,-8,-72,-25,1,83,14,25,3,-27,0,1, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0030786471907049417, 0.0049788872711360455, 0.0064412551000714302, 0.0083003193140029907, 0.020613772794604301, 0.0086084185168147087, 0.0036313955206423998, 0.002741397125646472, 0.0085099516436457634, 0.0037364098243415356, 0.0025044805370271206, 0.0023070934694260359, 0.0029560441616922617, 0.0022266579326242208, 0.009928826242685318, 0.007186071015894413, 0.0058447606861591339, 0.022338220849633217, 0.0042143044993281364, 0.0036611047107726336, 0.0051483581773936749, 0.018832778558135033, 0.0044716531410813332, 0.0074928519316017628, 0.0020032061729580164, 0.0033187542576342821, 0.0017722806660458446, 0.0038999961689114571, 0.010259085334837437, 0.051835257560014725, 0.0079343104735016823, 0.0039196503348648548, 0.0034092618152499199, 0.0052411919459700584, 0.0073478929698467255, 0.0045298431068658829, 0.0031601253431290388, 0.0022611443419009447, 0.006485846359282732, 0.0031478120945394039, 0.0048687336966395378, 0.0074774632230401039, 0.0033567317295819521, 0.0040582348592579365, 0.0032604550942778587, 0.012505604885518551, 0.0026973951607942581, 0.010665795765817165, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 724, -164, -808, 1313, 4324, 3209, -571, 2529, 2290, 925, -215, 3875, 519, 297, -818, 735, 2704, 18438, 1320, -340, 1198, -1092, -253, 1966, -171, -724, 1366, 190, 4344, 10841, 2694, -124, 158, -34, 1886, -381, 482, -202, 1698, 1090, 633, 2014, 272, -125, 795, 1307, 802, 474, };
const TfArray<48, float> quant36_scale = { 48, { 0.00056926981778815389, 0.00058448506752029061, 0.00027240239433012903, 0.00031483924249187112, 0.00017264853522647172, 0.00024706937256269157, 0.00052743084961548448, 0.0002930124755948782, 0.00026503909612074494, 0.00064765801653265953, 0.0003676616761367768, 0.00023515456996392459, 0.00032818914041854441, 0.00047873551375232637, 0.00044850731501355767, 0.0003420881403144449, 0.00024054710229393095, 5.9502363001229241e-05, 0.00045583720202557743, 0.00043390132486820221, 0.00040302122943103313, 0.00023766582307871431, 0.00056285946629941463, 0.00038102685357443988, 0.00049414474051445723, 0.00082853448111563921, 0.00038079419755376875, 0.00065567740239202976, 0.00020570636843331158, 9.2985363153275102e-05, 0.00030721043003723025, 0.001011164509691298, 0.00040578717016614974, 0.00046776162344031036, 0.0004026251845061779, 0.00033804180566221476, 0.00040290781180374324, 0.00073236756725236773, 0.00030211123521439731, 0.00055134814465418458, 0.00055191351566463709, 0.00033910994534380734, 0.00042244826909154654, 0.00057280866894870996, 0.00032748514786362648, 0.00035477872006595135, 0.00038226749165914953, 0.0003561466874089092, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -31,11,-5,-28,-80,-37,-127,19, 
  /* [1][0][][] */ 64,-34,-26,-79,127,-75,61,18, 
  /* [2][0][][] */ -111,127,-71,-121,73,2,-47,57, 
  /* [3][0][][] */ 94,33,109,16,122,127,126,4, 
  /* [4][0][][] */ -44,-90,66,-55,-33,-127,33,-47, 
  /* [5][0][][] */ 127,-43,47,46,-83,-30,24,-56, 
  /* [6][0][][] */ 20,27,127,-19,46,-38,-50,33, 
  /* [7][0][][] */ 30,-7,-127,-7,-42,101,69,-55, 
  /* [8][0][][] */ -17,127,-22,-2,64,75,58,52, 
  /* [9][0][][] */ -27,102,-76,79,-8,-127,17,94, 
  /* [10][0][][] */ -2,-127,10,-24,-78,-123,-55,-80, 
  /* [11][0][][] */ -125,-98,127,28,-25,-104,106,49, 
  /* [12][0][][] */ -61,45,-127,47,26,-57,-79,100, 
  /* [13][0][][] */ 86,-127,85,67,-1,22,35,-57, 
  /* [14][0][][] */ -40,61,-18,-127,-28,-56,-18,-3, 
  /* [15][0][][] */ 37,110,33,-27,40,-72,94,-127, 
  /* [16][0][][] */ -121,-127,-53,113,-59,-3,-33,105, 
  /* [17][0][][] */ -10,-112,-127,81,-38,68,-61,52, 
  /* [18][0][][] */ -59,-44,-41,67,24,73,16,127, 
  /* [19][0][][] */ 57,-127,93,-106,6,-66,37,-51, 
  /* [20][0][][] */ -15,71,33,-10,58,127,64,-6, 
  /* [21][0][][] */ 28,127,31,-15,49,-79,88,-118, 
  /* [22][0][][] */ 21,-6,53,40,10,127,21,-50, 
  /* [23][0][][] */ -94,-46,46,-102,118,92,-52,-127, 
  /* [24][0][][] */ -97,-116,38,-93,86,127,-73,-120, 
  /* [25][0][][] */ 127,7,-48,-6,18,14,-47,-10, 
  /* [26][0][][] */ -117,-55,-127,-16,-62,-35,0,-3, 
  /* [27][0][][] */ 112,27,15,-57,-127,-30,107,81, 
  /* [28][0][][] */ -93,-99,-8,64,-86,-127,19,-10, 
  /* [29][0][][] */ 127,104,52,-91,39,24,-62,-94, 
  /* [30][0][][] */ -59,-90,49,-59,53,88,-52,-127, 
  /* [31][0][][] */ 48,39,-20,127,16,-54,25,17, 
  /* [32][0][][] */ -32,127,3,48,2,102,-11,80, 
  /* [33][0][][] */ -42,127,-59,14,23,-3,-19,22, 
  /* [34][0][][] */ -127,-101,-59,92,-26,5,12,122, 
  /* [35][0][][] */ -54,127,-26,-9,66,104,69,68, 
  /* [36][0][][] */ 58,56,-22,-59,-127,-36,99,119, 
  /* [37][0][][] */ -76,125,39,37,-127,124,-25,-123, 
  /* [38][0][][] */ 0,81,46,21,127,93,126,47, 
  /* [39][0][][] */ -40,-71,33,-17,20,32,-93,127, 
  /* [40][0][][] */ -100,-47,-61,127,-51,10,-16,51, 
  /* [41][0][][] */ 127,-4,66,86,-71,12,7,-34, 
  /* [42][0][][] */ -33,18,-56,-127,58,-82,29,68, 
  /* [43][0][][] */ 21,-8,103,-11,37,127,90,19, 
  /* [44][0][][] */ -12,-37,-76,127,40,15,-48,-27, 
  /* [45][0][][] */ 37,96,78,-127,30,-69,11,-106, 
  /* [46][0][][] */ -40,-111,-30,39,-3,47,-70,127, 
  /* [47][0][][] */ 17,82,127,-16,83,95,117,2, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0051196995191276073, 0.0052565368823707104, 0.0024498372804373503, 0.0028314907103776932, 0.0015527058858424425, 0.0022220059763640165, 0.0047434228472411633, 0.0026351928245276213, 0.0023836158215999603, 0.005824679508805275, 0.0033065467141568661, 0.0021148507948964834, 0.0029515523929148912, 0.0043054837733507156, 0.0040336279198527336, 0.0030765524134039879, 0.0021633482538163662, 0.00053513149032369256, 0.0040995487943291664, 0.0039022697601467371, 0.003624550998210907, 0.0021374356001615524, 0.0050620483234524727, 0.0034267457667738199, 0.0044440659694373608, 0.0074513829313218594, 0.0034246533177793026, 0.0058968015946447849, 0.0018500098958611488, 0.00083625916158780456, 0.0027628815732896328, 0.0090938573703169823, 0.0036494263913482428, 0.0042067905887961388, 0.0036209893878549337, 0.0030401619151234627, 0.0036235309671610594, 0.0065865106880664825, 0.0027170220855623484, 0.0049585215747356415, 0.0049636061303317547, 0.0030497682746499777, 0.0037992671132087708, 0.0051515256054699421, 0.0029452210292220116, 0.0031906845979392529, 0.0034379034768790007, 0.0032029871363192797, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -9609, -3295, 9801, -10920, 20237, 7413, -7211, 14139, };
const TfArray<8, float> quant38_scale = { 8, { 0.00019180426897946745, 0.00024853352806530893, 0.00014673003170173615, 0.00021182438649702817, 0.00022334103414323181, 0.00017474588821642101, 0.00019326680921949446, 0.00020312615379225463, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -7,-7,-30,-80,-14,-26,27,-24,48,12,-42,-8,127,125,-17,-109, 
  /* [1][0][][] */ 127,-46,-41,9,-40,78,-64,-57,-33,92,-35,-37,-6,4,-53,-18, 
  /* [2][0][][] */ -33,-94,36,34,43,-44,-65,-14,37,-92,16,-127,53,-30,-80,25, 
  /* [3][0][][] */ 33,17,22,12,-11,69,-58,-14,127,52,22,31,4,-7,19,28, 
  /* [4][0][][] */ -75,-34,-14,-127,1,40,49,-113,23,-2,-36,-38,-112,34,-30,-14, 
  /* [5][0][][] */ 74,40,55,-28,37,-59,-127,-110,-11,-87,78,42,-48,51,47,-36, 
  /* [6][0][][] */ 95,28,-127,-65,11,-54,14,-62,-35,25,-109,71,73,-80,-5,41, 
  /* [7][0][][] */ -127,-13,111,-19,-70,-9,-4,-75,-68,55,69,-44,53,-34,23,37, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.008151681162416935, 0.010562674142420292, 0.0062360265292227268, 0.0090025365352630615, 0.0094919940456748009, 0.0074267000891268253, 0.0082138394936919212, 0.0086328610777854919, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 23666, -662, -224, 3888, -1738, 839, 6588, 768, 126, 553, -2832, 3024, -837, 56, -715, -906, };
const TfArray<16, float> quant40_scale = { 16, { 9.5661329396534711e-05, 0.00025852170074358582, 0.0002009331074077636, 0.00016438501188531518, 0.00097505107987672091, 0.00093668448971584439, 0.00022476374579127878, 0.001012308057397604, 0.00038732154644094408, 0.0013325816253200173, 0.00026079354574903846, 0.00023753744608256966, 9.472396777709946e-05, 0.00028359607676975429, 0.00023130521003622562, 0.00070441816933453083, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,0,14,1,-18,7,7,16,-10,-11,4,-14,-4,-10,11,-2, 5,-14,19,-3,14,-5,19,-25,-8,9,-5,89,-3,22,2,1, 2,-20,3,-9,2,-16,8,12,-3,1,-12,-30,11,-1,-14,2, 
  /* [0][1][][] */ -2,-11,-2,5,127,-27,-127,-21,127,127,-4,-19,118,-30,1,-21, -127,127,127,0,-86,-94,-9,-99,17,-107,127,127,127,127,127,127, 11,-3,-14,-3,-9,127,13,-7,-10,-14,-2,-21,15,-5,-19,-11, 
  /* [0][2][][] */ -8,-6,-5,-18,-14,16,47,8,-7,-10,-3,-9,1,-4,-3,-14, 19,-18,-8,-127,10,-15,-8,127,-5,0,6,-35,-10,-62,-13,-39, 0,-5,-8,-7,3,-4,10,1,-7,1,7,-10,2,-8,-19,-15, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.004065606277436018, 0.010987171903252602, 0.0085396571084856987, 0.0069863628596067429, 0.041439671069383621, 0.039809089154005051, 0.0095524592325091362, 0.043023090809583664, 0.016461165621876717, 0.056634720414876938, 0.011083725839853287, 0.010095341131091118, 0.0040257684886455536, 0.01205283310264349, 0.0098304711282253265, 0.029937772080302238, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2096, -2003, 594, -826, 29262, 16472, 4129, 3620, 2160, 117, 981, -1429, 3306, 4640, -1203, 17692, };
const TfArray<16, float> quant42_scale = { 16, { 0.00035199569538235664, 0.0007789887604303658, 0.00054639525478705764, 0.000302710453979671, 4.9184011004399508e-05, 8.6559783085249364e-05, 0.00022645230637863278, 4.5115513785276562e-05, 0.00029140812694095075, 6.3282896007876843e-05, 0.00096635392401367426, 0.00081782671622931957, 0.00070801330730319023, 2.257335654576309e-05, 0.0008814258617348969, 7.1900838520377874e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -91, -115, -34, 
  /* [0][1][][] */ 64, -40, 14, 
  /* [0][2][][] */ 29, 127, 17, 
  /* [1][0][][] */ 112, -94, -7, 
  /* [1][1][][] */ -127, 111, 28, 
  /* [1][2][][] */ 18, 2, -10, 
  /* [2][0][][] */ -24, -2, -50, 
  /* [2][1][][] */ 36, 96, 127, 
  /* [2][2][][] */ -13, -96, -82, 
  /* [3][0][][] */ 122, 127, 61, 
  /* [3][1][][] */ 5, -18, -11, 
  /* [3][2][][] */ -97, -123, -40, 
  /* [4][0][][] */ 39, -45, 3, 
  /* [4][1][][] */ 35, -127, 4, 
  /* [4][2][][] */ 28, -80, 0, 
  /* [5][0][][] */ -68, 36, 15, 
  /* [5][1][][] */ -127, 45, 19, 
  /* [5][2][][] */ -63, 46, 20, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -36, -52, -88, 
  /* [7][0][][] */ 29, 22, -8, 
  /* [7][1][][] */ 127, 71, -6, 
  /* [7][2][][] */ 34, 13, -10, 
  /* [8][0][][] */ -19, -29, 53, 
  /* [8][1][][] */ -52, -84, 127, 
  /* [8][2][][] */ -24, -59, 97, 
  /* [9][0][][] */ -5, 52, -7, 
  /* [9][1][][] */ 1, 127, -10, 
  /* [9][2][][] */ -2, 71, -13, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -38, -127, -30, 
  /* [10][2][][] */ 10, 39, 16, 
  /* [11][0][][] */ 9, -16, 12, 
  /* [11][1][][] */ 66, -89, 36, 
  /* [11][2][][] */ -81, 127, -43, 
  /* [12][0][][] */ -42, 48, -11, 
  /* [12][1][][] */ -127, 112, 5, 
  /* [12][2][][] */ -79, 78, 4, 
  /* [13][0][][] */ 64, 21, -1, 
  /* [13][1][][] */ 103, 100, 4, 
  /* [13][2][][] */ 101, 127, 65, 
  /* [14][0][][] */ -29, -26, 51, 
  /* [14][1][][] */ 47, 103, -127, 
  /* [14][2][][] */ -14, -69, 84, 
  /* [15][0][][] */ -98, -43, -7, 
  /* [15][1][][] */ -127, -106, 13, 
  /* [15][2][][] */ 11, -24, 32, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.090288244187831879, 0.1998136043548584, 0.1401524692773819, 0.077646389603614807, 0.012615887448191643, 0.022202916443347931, 0.058085884898900986, 0.01157230231910944, 0.074747301638126373, 0.016232304275035858, 0.24787348508834839, 0.20977568626403809, 0.18160812556743622, 0.0057901525869965553, 0.22608910501003265, 0.018442839384078979, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11119204014539719, } };
const TfArray<1, int> quant46_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.08924826979637146, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.061123117804527283, } };
const TfArray<1, int> quant53_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.10360264778137207, } };
const TfArray<1, int> quant54_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.057722408324480057, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022206753492355347, } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant61_scale = { 1, { 0.052730757743120193, } };
const TfArray<1, int> quant61_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.067899890244007111, } };
const TfArray<1, int> quant62_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.060692448168992996, } };
const TfArray<1, int> quant65_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.098443657159805298, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant62_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.053314115852117538, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,6 } };
const TfArray<1, float> quant69_scale = { 1, { 0.095632605254650116, } };
const TfArray<1, int> quant69_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension69, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
