#include "blynk.h"
#include "blynk_config.h"



BlynkTimer timer;

// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V0)
{
    // Set incoming value from pin V0 to a variable
    int value = param.asInt();

    // Update state
    Blynk.virtualWrite(V1, value);
}

// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
    // Change Web Link Button message to "Congratulations!"
    Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
    Blynk.setProperty(V3, "onImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
    Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
    // You can send any value at any time.
    // Please don't send more that 10 values per second.
    Blynk.virtualWrite(V2, millis() / 1000);
}

void initBlynk()
{
    // Debug console
    Serial.begin(115200);

    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
    // You can also specify server:
    // Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, "blynk.cloud", 80);
    // Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, IPAddress(192,168,1,100), 8080);

    // Setup a function to be called every second
    timer.setInterval(1000L, myTimerEvent);

    Blynk.run();
    timer.run();
}

void checkBlynkConnection()
{
    static bool connected_message_sent = false;
    static bool disconnected_message_sent = false;

    if (Blynk.connected())
    {
        digitalWrite(LED_BUILTIN, HIGH);
        if (!connected_message_sent)
        {
            displayMessage("Blynk is connected.");
            connected_message_sent = true;
            disconnected_message_sent = false;
        }
    }
    else
    {
        digitalWrite(LED_BUILTIN, LOW);
        if (!disconnected_message_sent)
        {
            Serial.println("Blynk is not connected");
            WiFi.begin(ssid, pass);
            Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

            disconnected_message_sent = true;
            connected_message_sent = false;
        }
    }
}
void sendData(String message)
{
    // Blynk.run();
    Serial.println("DATA SENT" + message);
    Blynk.virtualWrite(V0, message);
    // Blynk.run();
}

void BlynkManagerTask(void *pvParameters)
{
    initBlynk(); // Initial connection setup

    while (true)
    {
        Blynk.run();
        timer.run();
        vTaskDelay(10 / portTICK_PERIOD_MS); // Run frequently, but yield
    }
}
